<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AABB.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>AABB_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">hpp::fcl::AABB</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa55dc0aa22483464ca86d19593cfd425</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac46865af0d6227385e8e9ad84f33f7e1</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>BV_8h.html</filename>
    <includes id="kDOP_8h" name="kDOP.h" local="no" imported="no">hpp/fcl/BV/kDOP.h</includes>
    <includes id="AABB_8h" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="include_2hpp_2fcl_2BV_2OBB_8h" name="OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="RSS_8h" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <includes id="OBBRSS_8h" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <includes id="kIOS_8h" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BV_node.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>BV__node_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="BV_8h" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <class kind="struct">hpp::fcl::BVNodeBase</class>
    <class kind="struct">hpp::fcl::BVNode</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>kDOP.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>kDOP_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">hpp::fcl::KDOP</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae6cf593751a5ec4b8cacff23f263f2c3</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaef074fbede0ec91572f6aaf1c46cf0f1</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;, const CollisionRequest &amp;, FCL_REAL &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7adc32a2ebab911ca43857a7ee7d4a09</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kIOS.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>kIOS_8h.html</filename>
    <includes id="include_2hpp_2fcl_2BV_2OBB_8h" name="OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <class kind="class">hpp::fcl::kIOS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI kIOS</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6dbc1a1b53e4356bbd3762121b7d4b5f</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d66db04e136e5499d38f20dc1f56cf5</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafd7f666001d3e5993a56cc78387c362e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga45fc6ec1ea00a75cd3d683f171b258a7</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBB.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>include_2hpp_2fcl_2BV_2OBB_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">hpp::fcl::OBB</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI OBB</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0e3572df8542d6e55a90b9ab19af8692</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a82cf29771a725e3f2051c1f4aacc1c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0708248161a09bc67781974a45b126db</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>obbDisjoint</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBB.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>src_2BV_2OBB_8h.html</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a438b1c5b6b980188beb2ee3cc62f4d06</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const CollisionRequest &amp;request, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>obbDisjoint</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBBRSS.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>OBBRSS_8h.html</filename>
    <includes id="include_2hpp_2fcl_2BV_2OBB_8h" name="OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="RSS_8h" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <class kind="class">hpp::fcl::OBBRSS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9e3192731b5c60626d90aac2516965fe</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac655c5e454b1b7ac43a4d536860e8965</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gadb886982090fe15f5d0364f7423a76a6</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSS.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>RSS_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">hpp::fcl::RSS</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41b0545fd5f94baddd4af374018230ab</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0b55e1136e154a2aa39e85cdbbcc271b</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaee05b7707469f40cb749f0e89d827b9a</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_front.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>BVH__front_8h.html</filename>
    <class kind="struct">hpp::fcl::BVHFrontNode</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>std::list&lt; BVHFrontNode &gt;</type>
      <name>BVHFrontList</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8c20ec44e3a418af3dc5c65703874616</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFrontList</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0046ac4155cea8a2c752fe897de122fb</anchor>
      <arglist>(BVHFrontList *front_list, int b1, int b2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_internal.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>BVH__internal_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BVHBuildState</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_EMPTY</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a599291b2358a576bb29ed6bc3f771b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_BEGUN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34acbb3fd1a056ebe10e707a4e9d90ed679</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_PROCESSED</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34ac31973785f46a7236953db39831aa2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATE_BEGUN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34afd113a7a9f4f107f391973f10be2f7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATED</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34af2efe60e4f29aa2f2196ce63d70898d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_REPLACE_BEGUN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a26bfcd09168f3f2c6e37ec8996dd257b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHReturnCode</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_OK</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a5bb79400f0c1491a91e1714255ac2197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_MODEL_OUT_OF_MEMORY</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a6e8d204d67fd86da296cf5df8df6988f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_OUT_OF_SEQUENCE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a92aab1ee2362a2544e9d2d01fcfb22d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_MODEL</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aba9e47646636d73494e193503de1275b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_PREVIOUS_FRAME</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aaf8daf2fa25e777017147da4ef285aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNSUPPORTED_FUNCTION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a69fc64d3283b0d6c981fc4d7359537e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNUPDATED_MODEL</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a20ce868149503262e668936ae788fbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_INCORRECT_DATA</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448afa43ae63ca78c626a5b48b2af22d4034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNKNOWN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a101d30d34324deb868539c5397892e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHModelType</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_UNKNOWN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aac715e3d1c0ca1f507696344d223fb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_TRIANGLES</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4ae43bfff9c3dba9c5be72504b905f716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_POINTCLOUD</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aa8e8c3edd6807b005bd21f6d42e66e5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_model.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>BVH__model_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="BVH__internal_8h" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="BV__node_8h" name="BV_node.h" local="no" imported="no">hpp/fcl/BV/BV_node.h</includes>
    <class kind="class">hpp::fcl::BVFitter</class>
    <class kind="class">hpp::fcl::BVSplitter</class>
    <class kind="class">hpp::fcl::BVHModelBase</class>
    <class kind="class">hpp::fcl::BVHModel</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BVH_utility.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>BVH__utility_8h.html</filename>
    <includes id="BVH__model_8h" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; BV &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a97aabcac4c0f93fc14e1164b4def4082</anchor>
      <arglist>(const BVHModel&lt; BV &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; OBB &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a16b80b10ecf431f0544f27b5c1c52fbc</anchor>
      <arglist>(const BVHModel&lt; OBB &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; AABB &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a186023e22f810b40d74d650ebb97d036</anchor>
      <arglist>(const BVHModel&lt; AABB &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; RSS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0695a89b40fbbd834cb835c30c9ed31e</anchor>
      <arglist>(const BVHModel&lt; RSS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; kIOS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acf82efb8c19c54d20d73186d23c5e9d9</anchor>
      <arglist>(const BVHModel&lt; kIOS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; OBBRSS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab5ab6b17ce1cc2b66b5a85bb695ce013</anchor>
      <arglist>(const BVHModel&lt; OBBRSS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 16 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afda4e04adb716bb6082164e76762c03f</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 16 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 18 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6b375121974d6c597c19eb590b36c85e</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 18 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 24 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa0f0d3eb878e26066a187ae1575e2f5d</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 24 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getCovariance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af00bb05ed8ae1410da7e268c26b8ed8b</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adaceec24c8bd00c1f36af97e8e0f9127</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Matrix3f &amp;axes, Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5b66ef2a6abbd25f89ebcd5f1e9d7ff5</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;axes, Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>circumCircleComputation</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6e0aec22c4b80b3a60c442936c6db613</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a14232ec52eedd35670d6665df301f6d1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>collision_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="collision__func__matrix_8h" name="collision_func_matrix.h" local="no" imported="no">hpp/fcl/collision_func_matrix.h</includes>
    <class kind="class">hpp::fcl::ComputeCollision</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a92c6bbd26ada192d5a17fd054de5aed2</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad6d6761718327dee06a19e069ada4854</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a444b902dd91955b6feed4931e38500af</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a071b1a99f2481a6f8c9b41a7b24aa9ac</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_data.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>collision__data_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="struct">hpp::fcl::Contact</class>
    <class kind="struct">hpp::fcl::QueryRequest</class>
    <class kind="struct">hpp::fcl::QueryResult</class>
    <class kind="struct">hpp::fcl::CollisionRequest</class>
    <class kind="struct">hpp::fcl::CollisionResult</class>
    <class kind="struct">hpp::fcl::DistanceRequest</class>
    <class kind="struct">hpp::fcl::DistanceResult</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CollisionRequestFlag</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a6c6a81beb93df33ef631fb1c5f85b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTANCE_LOWER_BOUND</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a5748b82aa4907305d88b544f1a0d6782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REQUEST</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a51c6f10acf2a00d6364f494c59b19c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator~</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a56fef7e1565be433b2d4bda02d9b40f5</anchor>
      <arglist>(CollisionRequestFlag a)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator|</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad3a2e46341378309e16d1cbdc49681e9</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator&amp;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a01b2d93d4e2832cadb6f898d7d3bfc6f</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator^</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9865727c7e01efebdad7c69e38f0efe6</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afdc036f7a9abdd49bbc520055bd197dc</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a45cdaea65b84b32c82928ea0b1f88337</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a046f64624a803a4738c273a9a075a488</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_func_matrix.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>collision__func__matrix_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <class kind="struct">hpp::fcl::CollisionFunctionMatrix</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>collision_object.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>collision__object_8h.html</filename>
    <includes id="AABB_8h" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="class">hpp::fcl::CollisionGeometry</class>
    <class kind="class">hpp::fcl::CollisionObject</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OBJECT_TYPE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743ab97b195154ce66bcde999b96955c34b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a891e2acf8e8a0f7d09161116763e7786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a055e29c6c327db3317981d6e10ea483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a07875801169d528106cdc18050d34b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a8f0daf652a81850f41b7a5f9edd0973a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NODE_TYPE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a09499bc968015e70c88abd0ac49ec576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a6b8b72b2bc94c4cdaf0f8bdfe2f57d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a97792a9e5b54a66e35d622fc451ae228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ac6537c6f46eb315caa62e958d6a01ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a2bba1b5c0c32a60d102d873a87af3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a7cc7aacb5f760c03eecf10e777ab43a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a82f9a72132fc3ac2129e850eb3f587a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a5b262aadde08387b5024851aefd24f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aa5ada6139dd3dfd92b42ca868e22de5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a968d76f0f0e986116eeb66a8c5625e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629abaafdecaefcd7cc77bb222507c8ed5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a1b92d87b25a7b37c0165dc748e87f0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ad8b2f221e96d4115afcb432f566b91aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ab8222ab78f5e34873e47ff38a4a60990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aaf3f4f6aff7014652bc616023608f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a60419a2711acdcd7f0cec275b690204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a8177e508ab379d8adf9ac8ec6f6b00cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a165fed59837736b3cf419c9371b10ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aeed5451597a2217f56d409fbd501476b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a28eadc00e07b871426473f77fd298654</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_utility.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>collision__utility_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI CollisionGeometry *</type>
      <name>extract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a31b16dfa1a737fdefd7701783a253b53</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>data_types.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>data__types_8h.html</filename>
    <class kind="class">hpp::fcl::Triangle</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>double</type>
      <name>FCL_REAL</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adea4a7b8739d4b402df24c8f813f9167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 1 &gt;</type>
      <name>Vec3f</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2c54f23d974b75093503b78c52ebf26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0290ba47d50e32cb9ec7fe9919b34dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Vector2i</type>
      <name>support_func_guess_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afc53318f22b50924b091c556698d2c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>distance_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="include_2hpp_2fcl_2distance__func__matrix_8h" name="distance_func_matrix.h" local="no" imported="no">hpp/fcl/distance_func_matrix.h</includes>
    <class kind="class">hpp::fcl::ComputeDistance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a555bf285d1673306077fafed69baa66d</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a96bdf3a7cb8e472cfecfb2b55013ca50</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab855562d17d1b3f1e5b30b8e93eeea01</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1ddc8cd9de4e7f957c1c2cc1ebe6ff61</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance_func_matrix.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>include_2hpp_2fcl_2distance__func__matrix_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <class kind="struct">hpp::fcl::DistanceFunctionMatrix</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>distance_func_matrix.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>src_2distance__func__matrix_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>doc.hh</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>doc_8hh.html</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>fwd_8hh.html</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionObject &gt;</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d2a9681dce6546ad22ba34efc9ac53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionObject &gt;</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae73445793afcbbbaf947f1c640402d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>CollisionGeometryPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af3eb23736874699d672c2ba38fabfd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>CollisionGeometryConstPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8a3b79c97987777b6bb50177f5a710c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BVHModelBase &gt;</type>
      <name>BVHModelPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad7db690adf28ac471747238f4b6d7898</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_fitter.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>BV__fitter_8h.html</filename>
    <includes id="BVH__internal_8h" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="kIOS_8h" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="OBBRSS_8h" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <includes id="AABB_8h" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <class kind="class">hpp::fcl::BVFitterTpl</class>
    <class kind="class">hpp::fcl::BVFitter</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBB &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; RSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; kIOS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBBRSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; AABB &gt;</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6ed2b8b3e3552c6d2c50b1cd18d0eb25</anchor>
      <arglist>(Vec3f *ps, int n, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBB &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a47023cdf59d58acd42c8e61956d1656c</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; RSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abc1822cad419fa4a51eec74a50ec8dd2</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a104b61e67c94287f693cc837284ddd77</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0dcecfe497127679f97a56516d91fefd</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; AABB &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a97f91a601a988c40c0ae2d9b24f34976</anchor>
      <arglist>(Vec3f *ps, int n, AABB &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_splitter.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>BV__splitter_8h.html</filename>
    <includes id="BVH__internal_8h" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="kIOS_8h" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="OBBRSS_8h" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <class kind="class">hpp::fcl::BVSplitter</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SplitMethodType</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEAN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a41984460d51b7a959a8dc725e48f3804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEDIAN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a48f7486082fdbb59501f0b5683fed99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_BV_CENTER</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096af22470b4ca15070ae44678e8b39bcbd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>intersect.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>intersect_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>tools.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>tools_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af70bf2c011f5bfc4d826b1ad5aa8d198</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;_w, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;_u, const Eigen::MatrixBase&lt; Derived3 &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad8854d299d07f45639813469b850e697</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R1, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t1, const Eigen::MatrixBase&lt; Derived &gt; &amp;R2, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t2, const Eigen::MatrixBase&lt; Derived &gt; &amp;R, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a11fdb8bba107aa378d0b4144a9067e5d</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, typename Derived::Scalar dout[3], Vector *vout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad19b7d3d0aad076d68c9d62e62b599d2</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;lhs, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;rhs, const FCL_REAL tol=std::numeric_limits&lt; FCL_REAL &gt;::epsilon() *100)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>traversal_node_base.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__node__base_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>traversal_node_bvh_shape.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__node__bvh__shape_8h.html</filename>
    <class kind="class">MeshShapeDistanceTraversalNodeRSS</class>
    <class kind="class">MeshShapeDistanceTraversalNodekIOS</class>
    <class kind="class">MeshShapeDistanceTraversalNodeOBBRSS</class>
    <class kind="class">ShapeMeshDistanceTraversalNode</class>
    <class kind="class">ShapeMeshDistanceTraversalNodeRSS</class>
    <class kind="class">ShapeMeshDistanceTraversalNodekIOS</class>
    <class kind="class">ShapeMeshDistanceTraversalNodeOBBRSS</class>
  </compound>
  <compound kind="file">
    <name>traversal_node_bvhs.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__node__bvhs_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>traversal_node_octree.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__node__octree_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>traversal_node_setup.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__node__setup_8h.html</filename>
    <namespace>details</namespace>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a3c7fea1281ccd2c57ba07f27f1d729ae</anchor>
      <arglist>(MeshCollisionTraversalNode&lt; BV, RelativeTransformationIsIdentity &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>ae1f61713d77383c0b558e0dbd2c42b51</anchor>
      <arglist>(MeshCollisionTraversalNode&lt; BV, 0 &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a37a0803c3fdaa0e5711b3d75fa17a735</anchor>
      <arglist>(ShapeDistanceTraversalNode&lt; S1, S2 &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>aa53ad13522a5675656419f26a0c0d3d9</anchor>
      <arglist>(MeshDistanceTraversalNode&lt; BV, RelativeTransformationIsIdentity &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a89310d72c21baa7834d6a1a8965ee11b</anchor>
      <arglist>(MeshDistanceTraversalNode&lt; BV, 0 &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a5da68986084fee457157d9e974be1d90</anchor>
      <arglist>(MeshShapeDistanceTraversalNode&lt; BV, S &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a7cfbba4732d579509ac95589173a2c69</anchor>
      <arglist>(ShapeMeshDistanceTraversalNode&lt; S, BV &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>aef1cdd6a9d6dd58219e2eff3ea026bab</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeRSS&lt; S &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>aa5cdef67c37e995b900411994316b59d</anchor>
      <arglist>(MeshShapeDistanceTraversalNodekIOS&lt; S &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a39ad07a9970069d91767d7c64dbf16ab</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeOBBRSS&lt; S &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>a56b6b159a777442e5926ff036ddea3ae</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeRSS&lt; S &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>ac58f55a01beb1c0355a4154cc102b0b5</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodekIOS&lt; S &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>traversal__node__setup_8h.html</anchorfile>
      <anchor>af32b9658ec5d9375dabd8b1640888774</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeOBBRSS&lt; S &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_shapes.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__node__shapes_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>traversal_recurse.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/internal/</path>
    <filename>traversal__recurse_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>matrix_3f.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>matrix__3f_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
  </compound>
  <compound kind="file">
    <name>transform.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>transform_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">hpp::fcl::Transform3f</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; FCL_REAL &gt;</type>
      <name>Quaternion3f</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9e6a031efadd2b45d9e6a710a4db8b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>fromAxisAngle</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a19b6516b21d4de7cec704658b232567b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;axis, FCL_REAL angle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>types_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
  </compound>
  <compound kind="file">
    <name>vec_3f.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>vec__3f_8h.html</filename>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
  </compound>
  <compound kind="file">
    <name>assimp.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/mesh_loader/</path>
    <filename>assimp_8h.html</filename>
    <includes id="OBBRSS_8h" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <includes id="BVH__model_8h" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <class kind="struct">hpp::fcl::internal::TriangleAndVertices</class>
    <class kind="struct">hpp::fcl::internal::Loader</class>
    <namespace>Assimp</namespace>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::internal</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>buildMesh</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>afd134a194170e4a32978bcfd8aaad2a0</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>meshFromAssimpScene</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>a69a53dd2f3009f45f737b9bc223ee512</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPolyhedronFromResource</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6f4dd9e9c902262cc1750186ac08a5fe</anchor>
      <arglist>(const std::string &amp;resource_path, const fcl::Vec3f &amp;scale, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;polyhedron)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/mesh_loader/</path>
    <filename>loader_8h.html</filename>
    <includes id="fwd_8hh" name="fwd.hh" local="no" imported="no">hpp/fcl/fwd.hh</includes>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <class kind="class">hpp::fcl::MeshLoader</class>
    <class kind="class">hpp::fcl::CachedMeshLoader</class>
    <class kind="struct">hpp::fcl::CachedMeshLoader::Key</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>gjk.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>gjk_8h.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="struct">hpp::fcl::details::MinkowskiDiff</class>
    <class kind="struct">hpp::fcl::details::MinkowskiDiff::ShapeData</class>
    <class kind="struct">hpp::fcl::details::GJK</class>
    <class kind="struct">hpp::fcl::details::GJK::SimplexV</class>
    <class kind="struct">hpp::fcl::details::GJK::Simplex</class>
    <class kind="struct">hpp::fcl::details::EPA</class>
    <class kind="struct">hpp::fcl::details::EPA::SimplexF</class>
    <class kind="struct">hpp::fcl::details::EPA::SimplexList</class>
    <class kind="struct">hpp::fcl::details::EPA::SimplexHorizon</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5cb912cfb8f24a5f3345237a09cb61ed</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir, bool dirIsNormalized, int &amp;hint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>narrowphase.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>narrowphase_8h.html</filename>
    <includes id="gjk_8h" name="gjk.h" local="no" imported="no">hpp/fcl/narrowphase/gjk.h</includes>
    <class kind="struct">hpp::fcl::GJKSolver</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SHAPE_INTERSECT_SPECIALIZATION_BASE</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a71f281c1c20653479672e0b5fc31dd2c</anchor>
      <arglist>(S1, S2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a1aab93f2fc1ea0b1101b45233d66adbe</anchor>
      <arglist>(S1, S2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a533e701f9784824a6c0bc06a8a5f2d83</anchor>
      <arglist>(S1, S2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>ad13491792779c6787efb04b0ddf5bafe</anchor>
      <arglist>(S1, S2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae7f961891f4397c4601310e1edc26d7c</anchor>
      <arglist>(Sphere, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad5d1ff41aa29efb553cab466c1f0fa9a</anchor>
      <arglist>(Sphere, Sphere)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a637ad857bcde670904ee1ac92962ea5f</anchor>
      <arglist>(Sphere, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a17003890440abab826f73d35d06152e4</anchor>
      <arglist>(Sphere, Halfspace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7904dac07ec3e9a7f327d6abf439a7b6</anchor>
      <arglist>(Sphere, Plane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a25a8b4f58eff55d9f6c440c668171af0</anchor>
      <arglist>(Halfspace, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad1a8902550ffc9e7cf0eec25c1a38ca2</anchor>
      <arglist>(Halfspace, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4474c26a59fe66242f39c96f1ed02780</anchor>
      <arglist>(Halfspace, Cylinder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6761c9fdab9d2644989504233a3b30c5</anchor>
      <arglist>(Halfspace, Cone)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a97e3de1f46129f3c777d841bcdaa3f61</anchor>
      <arglist>(Halfspace, Plane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fc6f6eaf731446d8580111654a2cbd5</anchor>
      <arglist>(Plane, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0ab459f12c7c137b7846a1e306e71201</anchor>
      <arglist>(Plane, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a94b413899776b356bad6b0dbdce25474</anchor>
      <arglist>(Plane, Cylinder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f06284e59efdac747fd01375dee9846</anchor>
      <arglist>(Plane, Cone)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f0dc727a59e23f4b9603cff5928a827</anchor>
      <arglist>(Sphere, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a19f270ca3b3caf1e8cc1eee594e6d653</anchor>
      <arglist>(Sphere, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abdb831fa2ce7547d43a8fe52c174fc4f</anchor>
      <arglist>(Sphere, Cylinder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a383e041b2134bdefc315b38cf4ac7d56</anchor>
      <arglist>(Sphere, Sphere)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a253533e0fa668b42a3196a2df90bcd98</anchor>
      <arglist>(Capsule, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1f547ac63b61a3e609149d09afcd5ca0</anchor>
      <arglist>(TriangleP, TriangleP)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad6307be69028e17b6047d553d002b803</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a68fe3f9431a6833576a9865d2d76aacb</anchor>
      <arglist>(Sphere, Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac4d2a7a83f68983fe0c1c29f0baa66d9</anchor>
      <arglist>(Sphere, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a586248491c5bde5252ca2dc2c6dc2a2d</anchor>
      <arglist>(Sphere, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2183a279c433bb6a10d3afc47ce279fe</anchor>
      <arglist>(Box, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abd849ef3b5972d6eb00c75f68c0c84c7</anchor>
      <arglist>(Box, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aca6abd1a064c623895fdebf8dd7b8764</anchor>
      <arglist>(Capsule, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1670598a25cbc06c820d1a0e2e4c2bc1</anchor>
      <arglist>(Capsule, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2716dd0e3d8c474e237eb68489aba662</anchor>
      <arglist>(Cylinder, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa65127fea08c87b45bd818ebb0ba6034</anchor>
      <arglist>(Cylinder, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac4beed504fae3a756f74b93be2dd13e8</anchor>
      <arglist>(Cone, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae4c0e84b8915349f0d0f8f5c412cd2dd</anchor>
      <arglist>(Cone, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0c23d2e645a9e97450f59c983dec3b5f</anchor>
      <arglist>(Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa70baddd9ac2ef8975a1017363e69955</anchor>
      <arglist>(Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a80bb32260d0655dfa64770eb8e25d6d8</anchor>
      <arglist>(Plane, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f61772c196f2cdddb7dfe2848ddbc10</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>add874747393f90e9e222eb1cca1af553</anchor>
      <arglist>(Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5cde650c07da7d11fa2509ad19f7ab67</anchor>
      <arglist>(Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f7041c4c34b0f336d9cbdb912ef2120</anchor>
      <arglist>(Sphere, Box,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a21d779a699223126c878c29cc961e3e1</anchor>
      <arglist>(Sphere, Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d315d14201cc056cbfec015472942ea</anchor>
      <arglist>(Sphere, Cylinder,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fd66ec0e0d05901161fc577cfeafd99</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3bc5ba1687331c4d880eb3d6a46cd5fd</anchor>
      <arglist>(Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acd1a2357f3fc817d4af5a2da28ac1029</anchor>
      <arglist>(TriangleP,)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>acfcc5b288a4c0c087743fe2c2aba7b92</anchor>
      <arglist>(Shape1, Shape2, doc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a811f0ac956c051db88c60e6a8b2bc0c9</anchor>
      <arglist>(Shape, doc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a62a995a85e9cec8100efba2873734814</anchor>
      <arglist>(Shape1, Shape2, doc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad6307be69028e17b6047d553d002b803</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a68fe3f9431a6833576a9865d2d76aacb</anchor>
      <arglist>(Sphere, Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac4d2a7a83f68983fe0c1c29f0baa66d9</anchor>
      <arglist>(Sphere, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a586248491c5bde5252ca2dc2c6dc2a2d</anchor>
      <arglist>(Sphere, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2183a279c433bb6a10d3afc47ce279fe</anchor>
      <arglist>(Box, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abd849ef3b5972d6eb00c75f68c0c84c7</anchor>
      <arglist>(Box, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aca6abd1a064c623895fdebf8dd7b8764</anchor>
      <arglist>(Capsule, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1670598a25cbc06c820d1a0e2e4c2bc1</anchor>
      <arglist>(Capsule, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2716dd0e3d8c474e237eb68489aba662</anchor>
      <arglist>(Cylinder, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa65127fea08c87b45bd818ebb0ba6034</anchor>
      <arglist>(Cylinder, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac4beed504fae3a756f74b93be2dd13e8</anchor>
      <arglist>(Cone, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae4c0e84b8915349f0d0f8f5c412cd2dd</anchor>
      <arglist>(Cone, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0c23d2e645a9e97450f59c983dec3b5f</anchor>
      <arglist>(Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa70baddd9ac2ef8975a1017363e69955</anchor>
      <arglist>(Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a80bb32260d0655dfa64770eb8e25d6d8</anchor>
      <arglist>(Plane, Halfspace,)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a17f31675e6adb59d75541b6a037cae73</anchor>
      <arglist>(Shape, doc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f61772c196f2cdddb7dfe2848ddbc10</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>add874747393f90e9e222eb1cca1af553</anchor>
      <arglist>(Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5cde650c07da7d11fa2509ad19f7ab67</anchor>
      <arglist>(Plane,)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a2c1ab6149325d30fc1b5a46246d4e139</anchor>
      <arglist>(Shape1, Shape2, doc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>ac58b3e8fa09e987cf62d841aa572109e</anchor>
      <arglist>(Shape, doc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>narrowphase_8h.html</anchorfile>
      <anchor>a3ffe89c671283ada10bb2732621316a3</anchor>
      <arglist>(Shape1, Shape2, doc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f7041c4c34b0f336d9cbdb912ef2120</anchor>
      <arglist>(Sphere, Box,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a21d779a699223126c878c29cc961e3e1</anchor>
      <arglist>(Sphere, Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d315d14201cc056cbfec015472942ea</anchor>
      <arglist>(Sphere, Cylinder,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fd66ec0e0d05901161fc577cfeafd99</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3bc5ba1687331c4d880eb3d6a46cd5fd</anchor>
      <arglist>(Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acd1a2357f3fc817d4af5a2da28ac1029</anchor>
      <arglist>(TriangleP,)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>octree.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>octree_8h.html</filename>
    <includes id="AABB_8h" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <class kind="class">hpp::fcl::OcTree</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>profile.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/</path>
    <filename>profile_8h.html</filename>
    <class kind="class">hpp::fcl::tools::Profiler</class>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedBlock</class>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedStart</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::time</namespace>
    <namespace>hpp::fcl::tools</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_PROFILING</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a7b3827d1a940d40b5a44fa34d7f42254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>point</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>ac4a863e49926d2acd048cf75d4888c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>duration</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>a09f5cee278621a2800b3cd6b7f5c8229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>a8ac8c48fdfd1731eda6a534e174527a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>a1cbdfd430bc6cf66673fb9ebc07a9cad</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>aafa8547e25fbd027e5ac032328b46465</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convex.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>convex_8h.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="convex_8hxx" name="convex.hxx" local="no" imported="no">hpp/fcl/shape/details/convex.hxx</includes>
    <class kind="class">hpp::fcl::Convex</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>convex.hxx</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/shape/details/</path>
    <filename>convex_8hxx.html</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>geometric_shape_to_BVH_model.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>geometric__shape__to__BVH__model_8h.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="BVH__model_8h" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4159e5bd7fcd0d21a577e28973f2a3df</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Box &amp;shape, const Transform3f &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2efddca1e728c2facad8bcf136293bee</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int seg, unsigned int ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a082ba3c2464b887cc0c0d07da0a3e69c</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int n_faces_for_unit_sphere)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9ed3aec072ce9b1504575ae48b2bbbb1</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae7eda2b0400534a4888ba1d157f51f6a</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cylinder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a848be7c97311c9ba344e6cb2152c33b0</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab0d67e9fb0ca5af3d416774645673be3</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cone)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_shapes.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>geometric__shapes_8h.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="data__types_8h" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">hpp::fcl::ShapeBase</class>
    <class kind="class">hpp::fcl::TriangleP</class>
    <class kind="class">hpp::fcl::Box</class>
    <class kind="class">hpp::fcl::Sphere</class>
    <class kind="class">hpp::fcl::Capsule</class>
    <class kind="class">hpp::fcl::Cone</class>
    <class kind="class">hpp::fcl::Cylinder</class>
    <class kind="class">hpp::fcl::ConvexBase</class>
    <class kind="struct">hpp::fcl::ConvexBase::Neighbors</class>
    <class kind="class">hpp::fcl::Convex</class>
    <class kind="class">hpp::fcl::Halfspace</class>
    <class kind="class">hpp::fcl::Plane</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>geometric_shapes_utility.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>geometric__shapes__utility_8h.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="BV_8h" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="BV__fitter_8h" name="BV_fitter.h" local="no" imported="no">hpp/fcl/internal/BV_fitter.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeBV</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2be1ed3cb5e10908c58ac49834bcf24c</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7e5dccd855b2e03164a861085d1bcc8c</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac439854fc5c0f54d6d05dd476ca8adf8</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af63a3acef6a1a961a5563bdd4368e421</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac2741e82aa45d5e668a5f6beb9e575ea</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7d057bcd0bc931161aaf2cada8cba84b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a49c5250389b071ff48fd95272c0a6fee</anchor>
      <arglist>(const ConvexBase &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a65b9ffe994ef10c0a8417220cf8128bb</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aff6072402df5dfaf645a0787c61f5ea7</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa756e64cb895761eda9bf6b84c367267</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a62e8682fcab146b16376d0ee164897a8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acc29531b43787c3d787eee2f205d1e5d</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5e589885b7ce8302c967a8ee0bb48b90</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab7a78234dab23157bc13285d5ec1c34e</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae75f48642949abe72cf0a8536af4594b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8a7d52afadf8b5cb5210177f24b28cbc</anchor>
      <arglist>(const ConvexBase &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac19cf4bd5ddd03c43ad644a53a12766f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7c78518896db821ae4c252e9fa8584a2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a165618e6cd44517690b96b02d519d5ef</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae1dac581028f8a93e212767864f8091c</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af0ed4dad068cbc17368e6e0003da8bf8</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6119093dd05229ed0bbafb783b92416d</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a37581778c3f4d7a8c6aab74a0794fe4a</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a31a5196a276ce91cde2269144d96144b</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa592de4ec63a8446b7e5faa7aaaa4a7a</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f62d309b3eb540b231afd61400f11eb</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac832310f3d393d3fa459a4e89b04accd</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a285046016d23c6a9243ec1648fa1ee03</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a134493346e13d41a50f58c8c3b703805</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab3e987c7055c59c6c909d2eafc086ad5</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f4d9e15c1e1b0473d9ba1b60a0999ce</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad2ece30036a4f85e7c94c83cbc375440</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a389ea0f82667a14b50e3d06f73ddf65c</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a277ffcdbeb26ebc55199e6a406855dd6</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acc71a7af4b6e2e263856268cff862017</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1e0ae109d229233ad501f0ca44c0d83a</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a881ce55ecba092ac28c3e50dc9d251ac</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab8fc7100a8f801232d6edc17318ff4fd</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab73ba0d67fdb919b39b46212afadda5e</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f7c58989901ce4833565fbad1e941cc</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1d181bb550651b697fe967c65589bd20</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a60c2357a25853e76cee3c90c8fcfdb08</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac11f0f1e774f49eef7ce62cdf76e406b</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0a77f5fb3a5542a8894e703734674548</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a437d93b4db8e66f1eb3efb7240c39eea</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a223238cae76563da8fb18c186a74b2c3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI Halfspace</type>
      <name>transform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acea5b7360b35ca7d2f645cbe265b846b</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI Plane</type>
      <name>transform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a869df3c83544b794997edf4221483f59</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AABB.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>AABB_8cpp.html</filename>
    <includes id="AABB_8h" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa55dc0aa22483464ca86d19593cfd425</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac46865af0d6227385e8e9ad84f33f7e1</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kDOP.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>kDOP_8cpp.html</filename>
    <includes id="kDOP_8h" name="kDOP.h" local="no" imported="no">hpp/fcl/BV/kDOP.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>minmax</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a95a26dfee5c87f320546ec2fa2f262d6</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL &amp;minv, FCL_REAL &amp;maxv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minmax</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a66f4a5e99c0981b8d68f83c638071ca4</anchor>
      <arglist>(FCL_REAL p, FCL_REAL &amp;minv, FCL_REAL &amp;maxv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad4b17f71d100584d52ae63e35b1536f9</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances&lt; 5 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad2547e1a3447902d4ded23fbc95ae40a</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances&lt; 6 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3c6842e7b498de67b98d5c466bd014ee</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances&lt; 9 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a83c6d3f70db43e195697ecf0e86239e2</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7adc32a2ebab911ca43857a7ee7d4a09</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>template KDOP&lt; 16 &gt;</type>
      <name>translate&lt; 16 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f6a14e918ce47e474db2c8b8f4d34a7</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;, const Vec3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template KDOP&lt; 18 &gt;</type>
      <name>translate&lt; 18 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8be9408fc13b2edb8c9c791206d8c671</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;, const Vec3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template KDOP&lt; 24 &gt;</type>
      <name>translate&lt; 24 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae9f402916155c609a891dcf194655ea5</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;, const Vec3f &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kIOS.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>kIOS_8cpp.html</filename>
    <includes id="kIOS_8h" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="BVH__utility_8h" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d66db04e136e5499d38f20dc1f56cf5</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafd7f666001d3e5993a56cc78387c362e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga45fc6ec1ea00a75cd3d683f171b258a7</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI kIOS</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6dbc1a1b53e4356bbd3762121b7d4b5f</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBB.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>OBB_8cpp.html</filename>
    <includes id="include_2hpp_2fcl_2BV_2OBB_8h" name="OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="BVH__utility_8h" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="tools_8h" name="tools.h" local="no" imported="no">hpp/fcl/internal/tools.h</includes>
    <class kind="struct">hpp::fcl::internal::obbDisjoint_check_Ai_cross_Bi</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeVertices</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa3a6119df5c6f0637995b0b98de219c6</anchor>
      <arglist>(const OBB &amp;b, Vec3f vertices[8])</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>merge_largedist</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a95047ab2d47a61b3c0ad45da4952219e</anchor>
      <arglist>(const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>merge_smalldist</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afd1b14d8d731b21fa76dd982e327ff14</anchor>
      <arglist>(const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>obbDisjoint</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>obbDisjoint_check_A_axis</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>adf7a4b9ef24f26b135ce21b66f67e074</anchor>
      <arglist>(const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const Matrix3f &amp;Bf)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>obbDisjoint_check_B_axis</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>a425c17e11e7e74cde1bf071ba59530bc</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const Matrix3f &amp;Bf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a438b1c5b6b980188beb2ee3cc62f4d06</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const CollisionRequest &amp;request, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a82cf29771a725e3f2051c1f4aacc1c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0708248161a09bc67781974a45b126db</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI OBB</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0e3572df8542d6e55a90b9ab19af8692</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBBRSS.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>OBBRSS_8cpp.html</filename>
    <includes id="OBBRSS_8h" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>OBBRSS</type>
      <name>translate</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a03fc5c77aaee689b2a042aecb92c5a77</anchor>
      <arglist>(const OBBRSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSS.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BV/</path>
    <filename>RSS_8cpp.html</filename>
    <includes id="RSS_8h" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <includes id="BVH__utility_8h" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <includes id="tools_8h" name="tools.h" local="no" imported="no">hpp/fcl/internal/tools.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>clipToRange</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0f34d3f8dc595494ba54237f0f47ab97</anchor>
      <arglist>(FCL_REAL &amp;val, FCL_REAL a, FCL_REAL b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>segCoords</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0ef31b74f4e0cf2aeef87570af22b257</anchor>
      <arglist>(FCL_REAL &amp;t, FCL_REAL &amp;u, FCL_REAL a, FCL_REAL b, FCL_REAL A_dot_B, FCL_REAL A_dot_T, FCL_REAL B_dot_T)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inVoronoi</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a49b58ec6f268b54090f4c9aed30ea79b</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL Anorm_dot_B, FCL_REAL Anorm_dot_T, FCL_REAL A_dot_B, FCL_REAL A_dot_T, FCL_REAL B_dot_T)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>rectDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a82b137b8b8f8501c48c73a88de0ca993</anchor>
      <arglist>(const Matrix3f &amp;Rab, Vec3f const &amp;Tab, const FCL_REAL a[2], const FCL_REAL b[2], Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0b55e1136e154a2aa39e85cdbbcc271b</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaee05b7707469f40cb749f0e89d827b9a</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41b0545fd5f94baddd4af374018230ab</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>translate</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adb206c2b8c711593bb718185089d8680</anchor>
      <arglist>(const RSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_fitter.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BVH/</path>
    <filename>BV__fitter_8cpp.html</filename>
    <includes id="BV__fitter_8h" name="BV_fitter.h" local="no" imported="no">hpp/fcl/internal/BV_fitter.h</includes>
    <includes id="BVH__utility_8h" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <includes id="tools_8h" name="tools.h" local="no" imported="no">hpp/fcl/internal/tools.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::OBB_fit_functions</namespace>
    <namespace>hpp::fcl::RSS_fit_functions</namespace>
    <namespace>hpp::fcl::kIOS_fit_functions</namespace>
    <namespace>hpp::fcl::OBBRSS_fit_functions</namespace>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>a590768616d599b74fda315f795945742</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>aa5143e3e26f5ac2297657a331c5da5d0</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>a91227ba5084b7662b0c0e04122ff66a3</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit6</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>ac4938516465c39fd76cf710cdd19e4c3</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>acaa8d4fe1cc86b70354b8805114d6c32</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a2aa32e14401d6ab1564e853ad14664ab</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a72b53a97c51c469218f7f69262ce0892</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a744d1c437b781acf288c30ac92961983</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit6</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>ae66cea431640d57118daacfd89d7ddd6</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a7fda0d035ac2101fd02620b7af124fb4</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>af92076cb492de54bf8b4acce8e296863</anchor>
      <arglist>(Vec3f *ps, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>a1338a8ecf31e7a71c088885488fde262</anchor>
      <arglist>(Vec3f *ps, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>a0dfae2f595ba64c67585dd38bf0afe53</anchor>
      <arglist>(Vec3f *ps, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>a736305e9dd83a553a20b92f13fbfd062</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>a7fbe7968c0e704d358743d913b007c0c</anchor>
      <arglist>(Vec3f *ps, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>aeb071d2f709665c54ccb2ae0b536d587</anchor>
      <arglist>(Vec3f *ps, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>afe968ff235bac0f0d272e95bfd1c6b84</anchor>
      <arglist>(Vec3f *ps, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>a4c61fdf874f506f1e96842c8d150b66a</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac946644080a4d2d93d023cc5bba51b7d</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a47c63f16820c8a25fe6605c35df1e040</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a44c200d8b2af185afb2d265a832987e5</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adbbd7bb04a2f3718a89a44f3c6231cb0</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0dbc5bff77caead21e8b668f8ce0593a</anchor>
      <arglist>(Vec3f *ps, int n, AABB &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_splitter.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BVH/</path>
    <filename>BV__splitter_8cpp.html</filename>
    <includes id="BV__splitter_8h" name="BV_splitter.h" local="no" imported="no">hpp/fcl/internal/BV_splitter.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeSplitVector</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2b3e7cd992c7ca874384d3adc625f6c0</anchor>
      <arglist>(const BV &amp;bv, Vec3f &amp;split_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitVector&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a239f00a1d16a6ed6c2059d6f682748c2</anchor>
      <arglist>(const kIOS &amp;bv, Vec3f &amp;split_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitVector&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5932f7ee9ca5dbc56cf8bd9cdc24c02b</anchor>
      <arglist>(const OBBRSS &amp;bv, Vec3f &amp;split_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitValue_bvcenter</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa4474ce850d876cf16e476bc611a7dfb</anchor>
      <arglist>(const BV &amp;bv, FCL_REAL &amp;split_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitValue_mean</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7c87b0d7c05b271d5128d3b2fd3f803b</anchor>
      <arglist>(const BV &amp;, Vec3f *vertices, Triangle *triangles, unsigned int *primitive_indices, int num_primitives, BVHModelType type, const Vec3f &amp;split_vector, FCL_REAL &amp;split_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitValue_median</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af6f2988d0be989e59d4d0afcf86c9ce7</anchor>
      <arglist>(const BV &amp;, Vec3f *vertices, Triangle *triangles, unsigned int *primitive_indices, int num_primitives, BVHModelType type, const Vec3f &amp;split_vector, FCL_REAL &amp;split_value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_model.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BVH/</path>
    <filename>BVH__model_8cpp.html</filename>
    <includes id="BVH__model_8h" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <includes id="BV_8h" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="convex_8h" name="convex.h" local="no" imported="no">hpp/fcl/shape/convex.h</includes>
    <includes id="BV__splitter_8h" name="BV_splitter.h" local="no" imported="no">hpp/fcl/internal/BV_splitter.h</includes>
    <includes id="BV__fitter_8h" name="BV_fitter.h" local="no" imported="no">hpp/fcl/internal/BV_fitter.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BVH_utility.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/BVH/</path>
    <filename>BVH__utility_8cpp.html</filename>
    <includes id="BVH__utility_8h" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="geometric__shapes__utility_8h" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>BVHModel&lt; BV &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>abb38e75870e230b06fa66ef248c939ab</anchor>
      <arglist>(const BVHModel&lt; BV &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;_aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; OBB &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a16b80b10ecf431f0544f27b5c1c52fbc</anchor>
      <arglist>(const BVHModel&lt; OBB &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; AABB &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a186023e22f810b40d74d650ebb97d036</anchor>
      <arglist>(const BVHModel&lt; AABB &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; RSS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0695a89b40fbbd834cb835c30c9ed31e</anchor>
      <arglist>(const BVHModel&lt; RSS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; kIOS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acf82efb8c19c54d20d73186d23c5e9d9</anchor>
      <arglist>(const BVHModel&lt; kIOS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; OBBRSS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab5ab6b17ce1cc2b66b5a85bb695ce013</anchor>
      <arglist>(const BVHModel&lt; OBBRSS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 16 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afda4e04adb716bb6082164e76762c03f</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 16 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 18 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6b375121974d6c597c19eb590b36c85e</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 18 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 24 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa0f0d3eb878e26066a187ae1575e2f5d</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 24 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getCovariance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af00bb05ed8ae1410da7e268c26b8ed8b</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adaceec24c8bd00c1f36af97e8e0f9127</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Matrix3f &amp;axes, Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5b66ef2a6abbd25f89ebcd5f1e9d7ff5</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;axes, Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>circumCircleComputation</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6e0aec22c4b80b3a60c442936c6db613</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a14232ec52eedd35670d6665df301f6d1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision_8cpp.html</filename>
    <includes id="collision_8h" name="collision.h" local="no" imported="no">hpp/fcl/collision.h</includes>
    <includes id="collision__func__matrix_8h" name="collision_func_matrix.h" local="no" imported="no">hpp/fcl/collision_func_matrix.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>CollisionFunctionMatrix &amp;</type>
      <name>getCollisionFunctionLookTable</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a81b7ad6d7353c8d7f3b3b6ec909e38a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a92c6bbd26ada192d5a17fd054de5aed2</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad6d6761718327dee06a19e069ada4854</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_data.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision__data_8cpp.html</filename>
    <includes id="collision__data_8h" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>collision_func_matrix.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision__func__matrix_8cpp.html</filename>
    <includes id="collision__func__matrix_8h" name="collision_func_matrix.h" local="no" imported="no">hpp/fcl/collision_func_matrix.h</includes>
    <includes id="traversal__node__setup_8h" name="traversal_node_setup.h" local="no" imported="no">hpp/fcl/internal/traversal_node_setup.h</includes>
    <includes id="collision__node_8h" name="collision_node.h" local="no" imported="no">../src/collision_node.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="traits__traversal_8h" name="traits_traversal.h" local="no" imported="no">../src/traits_traversal.h</includes>
    <class kind="struct">hpp::fcl::details::bvh_shape_traits</class>
    <class kind="struct">hpp::fcl::BVHShapeCollider</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>collision__func__matrix_8cpp.html</anchorfile>
      <anchor>ac1c2bc28e0ba349ce6133057234e3cf1</anchor>
      <arglist>(bv)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4e6281f0636a0878105861cbae36b0b2</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ae1831c71dd55b3309edb8dc455f7e57a</anchor>
      <arglist>(OBB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ac0240ef5a6daa5185ec811193d8eee00</anchor>
      <arglist>(RSS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7e713b163720df7fdf3c14d0f8aa1d8e</anchor>
      <arglist>(kIOS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a894ea5154f0b3fefb38f521e5f2e74f2</anchor>
      <arglist>(OBBRSS)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>orientedMeshCollide</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a2baf9ffdd8c6a025381203924cab77c4</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa721206fac1fe73c87ff92d8a6590db3</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide&lt; OBB &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a379b4a55dd38f24d36cb285f18d49cea</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab6cfcf7370957278bac9500e05cb5312</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a300c230f92bb48cc643c85980637e141</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aeb08d4a542ad31f25b8db6ba49d3e49f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_node.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision__node_8cpp.html</filename>
    <includes id="collision__node_8h" name="collision_node.h" local="no" imported="no">../src/collision_node.h</includes>
    <includes id="traversal__recurse_8h" name="traversal_recurse.h" local="no" imported="no">hpp/fcl/internal/traversal_recurse.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8ad4a78816864faefdb0a1f367002b97</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;request, CollisionResult &amp;result, BVHFrontList *front_list, bool recursive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2e075475ca0a78d6346dbf5f28904b5a</anchor>
      <arglist>(DistanceTraversalNodeBase *node, BVHFrontList *front_list, int qsize)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_node.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision__node_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>collision_object.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision__object_8cpp.html</filename>
    <includes id="collision__object_8h" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>collision_utility.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>collision__utility_8cpp.html</filename>
    <includes id="collision__utility_8h" name="collision_utility.h" local="no" imported="no">hpp/fcl/collision_utility.h</includes>
    <includes id="BVH__utility_8h" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>CollisionGeometry *</type>
      <name>extractBVHtpl</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7f008382231fa2745d03415555fb9366</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>CollisionGeometry *</type>
      <name>extractBVH</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a8fed8942037b27bc7f0d6894b70e2522</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI CollisionGeometry *</type>
      <name>extract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a31b16dfa1a737fdefd7701783a253b53</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>distance_8cpp.html</filename>
    <includes id="distance_8h" name="distance.h" local="no" imported="no">hpp/fcl/distance.h</includes>
    <includes id="include_2hpp_2fcl_2distance__func__matrix_8h" name="distance_func_matrix.h" local="no" imported="no">hpp/fcl/distance_func_matrix.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>DistanceFunctionMatrix &amp;</type>
      <name>getDistanceFunctionLookTable</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0d51d69f54dab6a3d9f400d7452beaf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a555bf285d1673306077fafed69baa66d</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a96bdf3a7cb8e472cfecfb2b55013ca50</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>box_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>box__halfspace_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Box, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3a542fad78c27aaa11b7d026b0e21230</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a59196c519f176f0a8afa55b59519244e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>box_plane.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>box__plane_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Box, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7271a28bf394bc9aedaf7d654295aa05</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a937503bd452548e66d930bf51e89b284</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>box_sphere.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>box__sphere_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Box, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac955d2a1e4d47d32f7b69af70c1ed4b8</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae0a584775466ce17214b258c1fe6c88b</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>capsule_capsule.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>capsule__capsule_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>clamp</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a45772505d1441b2599bbcc1bc4237268</anchor>
      <arglist>(const FCL_REAL &amp;num, const FCL_REAL &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clamped_linear</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a87353ea600c2fd543f7b9e6946b21790</anchor>
      <arglist>(Vec3f &amp;a_sd, const Vec3f &amp;a, const FCL_REAL &amp;s_n, const FCL_REAL &amp;s_d, const Vec3f &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Capsule, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa75cca8cfdb400910dd66dcb01fa4795</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>capsule_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>capsule__halfspace_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Capsule, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6af97e42eac0675fd4bf8db5e3f3e2c9</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a88d0a36136ffc0238d42ab2ac955a7b2</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>capsule_plane.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>capsule__plane_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Capsule, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8b617c95ffe315f3689456823c02581e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa0d71c1fe0a02da7baacb073aa59f4d5</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cone_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>cone__halfspace_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cone, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fa17a89bb052271d3a7961de48e05f7</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a35ce5f812c38ba262e3446a49eddc350</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cone_plane.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>cone__plane_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cone, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a11eb35e00e4a0f16e9e970320f475b1e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a66f8dcb06ab1b26e4b617df86fc8cbcc</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convex_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>convex__halfspace_8cpp.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; ConvexBase, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1a2db336d6dac446c5d4f0d0cff3434f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9f91a8a3d12b9a8fc4aef1a679dd58fd</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cylinder_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>cylinder__halfspace_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cylinder, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a54e0b937feae9282d0257974e732eec7</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1241f2928728c06dfde668ebe7170c9b</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cylinder_plane.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>cylinder__plane_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cylinder, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a728670ee0709a85bf6a150c8dd9aeb1e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4e5545917d5c34427e970cc0fd98fc9c</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphere_cylinder.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>sphere__cylinder_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0183f3b4eb68c71efb5d7afd05b3e030</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cylinder, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a22e030433ce7414d647b0c5fd62ae583</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphere_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>sphere__halfspace_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7bfa9eb4f60cc8918116cb83fae03aff</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab987a476fedd935d8576fae153bdfd46</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphere_plane.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>sphere__plane_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d253620edf656c6b62ca5d9bf7a1f57</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a21180dd7445263984fef09fb5c039320</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphere_sphere.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>sphere__sphere_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abc2af00358733a2c5ab0964bb1b0701f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide&lt; Sphere, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4040c03b70c2b7443931f6173ed10385</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triangle_halfspace.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/distance/</path>
    <filename>triangle__halfspace_8cpp.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">../narrowphase/details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; TriangleP, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5e6ef04f3b49ada87928655fd196aaf2</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, TriangleP &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a38d4f7f428924f0c3fd477cbe0c74d6f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance_func_matrix.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>distance__func__matrix_8cpp.html</filename>
    <includes id="include_2hpp_2fcl_2distance__func__matrix_8h" name="distance_func_matrix.h" local="no" imported="no">hpp/fcl/distance_func_matrix.h</includes>
    <includes id="collision__node_8h" name="collision_node.h" local="no" imported="no">../src/collision_node.h</includes>
    <includes id="traversal__node__setup_8h" name="traversal_node_setup.h" local="no" imported="no">hpp/fcl/internal/traversal_node_setup.h</includes>
    <includes id="traits__traversal_8h" name="traits_traversal.h" local="no" imported="no">../src/traits_traversal.h</includes>
    <class kind="struct">hpp::fcl::BVHShapeDistancer</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer&lt; RSS, T_SH &gt;</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer&lt; kIOS, T_SH &gt;</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer&lt; OBBRSS, T_SH &gt;</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae2bdd78cf33c154a2b34a38f2396d65a</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>orientedBVHShapeDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab09b84191f10a783b5fde5d617f2992f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aef5cf2e59686888177e8ed28c4c0ea24</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>orientedMeshDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>af2a9c5a3d381c8923283a0a528d74c07</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance&lt; RSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4aaa1f5947fd74d49b6b75145990adc3</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9da0e6fc7d523c1323978faa6bd7a443</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9458dd4b1b1ed870f44be548535dd5c5</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae3a02ccd53f059517d6a7c235ea8837a</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>intersect.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>intersect_8cpp.html</filename>
    <includes id="intersect_8h" name="intersect.h" local="no" imported="no">hpp/fcl/internal/intersect.h</includes>
    <includes id="tools_8h" name="tools.h" local="no" imported="no">hpp/fcl/internal/tools.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>transform.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/math/</path>
    <filename>transform_8cpp.html</filename>
    <includes id="transform_8h" name="transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a99df9bdbfcae0833e73be287400791fa</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6dd7021712377c3c830116d8f56dc6be</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assimp.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/mesh_loader/</path>
    <filename>assimp_8cpp.html</filename>
    <includes id="assimp_8h" name="assimp.h" local="no" imported="no">hpp/fcl/mesh_loader/assimp.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>nullptr</name>
      <anchorfile>assimp_8cpp.html</anchorfile>
      <anchor>ab979d9d4b4923f7c54d6caa6e1a61936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>recurseBuildMesh</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>a0dcee0e08d0fa45492bebca4564bbc56</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, const aiNode *node, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>buildMesh</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>afd134a194170e4a32978bcfd8aaad2a0</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/mesh_loader/</path>
    <filename>loader_8cpp.html</filename>
    <includes id="loader_8h" name="loader.h" local="no" imported="no">hpp/fcl/mesh_loader/loader.h</includes>
    <includes id="assimp_8h" name="assimp.h" local="no" imported="no">hpp/fcl/mesh_loader/assimp.h</includes>
    <includes id="BV_8h" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>BVHModelPtr_t</type>
      <name>_load</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9cb45e8a08fe8a6b9c5605ff4f8732cc</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>details.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/narrowphase/</path>
    <filename>details_8h.html</filename>
    <includes id="traversal__node__setup_8h" name="traversal_node_setup.h" local="no" imported="no">hpp/fcl/internal/traversal_node_setup.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <class kind="struct">hpp::fcl::details::ContactPoint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a32d1e60c0e54ee1fa192ff01e916c655</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f *contact_points, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aaa3ad7e0e3f64b2e5913d59d046e7ff3</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCylinderDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a46ae4abaa69cb073fa56a6cc10ad170d</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aad058edfe682c3d503685739c1197b05</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f *contact_points, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4bcaa999947f69643c67c4b026aac9d6</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>segmentSqrDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ae64dcb74833601930e65f5cf340e9d6c</anchor>
      <arglist>(const Vec3f &amp;from, const Vec3f &amp;to, const Vec3f &amp;p, Vec3f &amp;nearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>projectInTriangle</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ada136020ea9fc32c579a6151ca14bc57</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3, const Vec3f &amp;normal, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a77e864eced1982f43af542c16f1ee6a0</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab436f5e0ee56e7272a76991b08ea4dd6</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5f23a98f33621802770322311114ca12</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a71c3b63fad5224fe749c0674da68df07</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boxBox2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a17dd2491944df7c2b7203c47fd7eaeee</anchor>
      <arglist>(const Vec3f &amp;halfSide1, const Matrix3f &amp;R1, const Vec3f &amp;T1, const Vec3f &amp;halfSide2, const Matrix3f &amp;R2, const Vec3f &amp;T2, Vec3f &amp;normal, FCL_REAL *depth, int *return_code, int maxc, std::vector&lt; ContactPoint &gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareContactPoints</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6b8e614972a9ab4b2411cd5f6a50c6d2</anchor>
      <arglist>(const ContactPoint &amp;c1, const ContactPoint &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxBoxIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a0ae72137615ad019d628eaf9663988ea</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth_, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>acdbc4ec76f14d4042d0ca323a842d058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a04d86f59357581007b4ab079cf50f7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ae9028aa6f9e5f68f5844f488cbeae004</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aa73c0bc0cce29f5855671b5fe59a9535</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab33117e360755821af52cfe1556e9f27</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsuleHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7aef1441d0e624780c5849a2ec406a39</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>acc72e6011e602fb1701093ae43117763</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coneHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a1e1c570de4b6d603ea687863f1992154</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>af6a06f6817de7c840cd8e02cf82a0468</anchor>
      <arglist>(const ConvexBase &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceTriangleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab07d68942b42396f9d647fd87d943e7a</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a281a49255faae461198ecaed5cbe2e41</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a3ecbf7e7887298b43b3c39cd1a17d11e</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f &amp;p, Vec3f &amp;d, Halfspace &amp;s, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4877ebf88613a9620944f8d5fa20e59f</anchor>
      <arglist>(const Halfspace &amp;h, const Transform3f &amp;tf1, const ShapeBase &amp;s, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>planeIntersectTolerance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ac1f5bbb96e2e88210d952146a534ad67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>planeIntersectTolerance&lt; double &gt;</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aaf9f0a709957b7dd69b619a70a6d7a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>planeIntersectTolerance&lt; float &gt;</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>afa2cf3bbce6cf362400ce60faf2e9fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>spherePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a81638ad0d66c1948c768e8fb23a21fdb</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxPlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a04f0fbf51a9254bedc663b9d87ca33d8</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxSphereDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad006a11ba7ff9fad2f6260ebb4256477</anchor>
      <arglist>(const Box &amp;b, const Transform3f &amp;tfb, const Sphere &amp;s, const Transform3f &amp;tfs, FCL_REAL &amp;dist, Vec3f &amp;pb, Vec3f &amp;ps, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsulePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a487edd7d0f258f8e8ae2bf51e9e91cdb</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderPlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a94610ecd0149efb25f77098fb679caa0</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a2ad015b80e0f60421c943c5e64d70423</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexPlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a78b285dfac6b4ea191e8b9229875a332</anchor>
      <arglist>(const ConvexBase &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeTriangleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a1f2623fa152f2a71df6a7dfeb00510b2</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspacePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a43ef9cfbc30cc714ecf94e2158f09c3b</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4b7ed102cb562e7366f5914ae9e30928</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *, FCL_REAL *, Vec3f *)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computePenetration</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6958914c6768e0565649ccd3e6a45804</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computePenetration</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a1e5b67c1c8d8fd6b3f459eda8ed61e29</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, const Transform3f &amp;tf1, const Transform3f &amp;tf2, Vec3f &amp;normal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gjk.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/narrowphase/</path>
    <filename>gjk_8cpp.html</filename>
    <includes id="gjk_8h" name="gjk.h" local="no" imported="no">hpp/fcl/narrowphase/gjk.h</includes>
    <includes id="intersect_8h" name="intersect.h" local="no" imported="no">hpp/fcl/internal/intersect.h</includes>
    <includes id="tools_8h" name="tools.h" local="no" imported="no">hpp/fcl/internal/tools.h</includes>
    <class kind="struct">hpp::fcl::details::shape_traits_base</class>
    <class kind="struct">hpp::fcl::details::shape_traits</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; TriangleP &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Box &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Sphere &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Capsule &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Cone &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Cylinder &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; ConvexBase &gt;</class>
    <class kind="struct">hpp::fcl::details::SmallConvex</class>
    <class kind="struct">hpp::fcl::details::LargeConvex</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <namespace>hpp::fcl::details::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CALL_GET_SHAPE_SUPPORT</name>
      <anchorfile>gjk_8cpp.html</anchorfile>
      <anchor>af38b1d6856212d6eaae05039c06f6bf6</anchor>
      <arglist>(ShapeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REGION_INSIDE</name>
      <anchorfile>gjk_8cpp.html</anchorfile>
      <anchor>a2a5e2a408e5c61f22720514ac8facfaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a9e745ffcd7639aa2c816f4c649f67b6d</anchor>
      <arglist>(const TriangleP *triangle, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a95bdcec6ddd981eefd54b7a3de3fa534</anchor>
      <arglist>(const Box *box, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>abd27882f4fb672eadf771fa61d8aa8b8</anchor>
      <arglist>(const Sphere *, const Vec3f &amp;, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7491859b78231e3e268616c695578795</anchor>
      <arglist>(const Capsule *capsule, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a26903c3981bfd9e597d83c0cbbe75ef8</anchor>
      <arglist>(const Cone *cone, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a619c48c014d3d4f53d4b1ba46d797df9</anchor>
      <arglist>(const Cylinder *cylinder, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupportLog</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>abec5e56c7649d7570e7c0082bffee33d</anchor>
      <arglist>(const ConvexBase *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupportLinear</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a0d34187556ac5aeffa201f486f09a644</anchor>
      <arglist>(const ConvexBase *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad88fd13a4070a4c563ac6246429675e5</anchor>
      <arglist>(const ConvexBase *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad77fede7aa2e2705f0e079f19c2cf300</anchor>
      <arglist>(const SmallConvex *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>afaa529c5c6e1e520e6ad5e81c22964b2</anchor>
      <arglist>(const LargeConvex *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *data)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5cb912cfb8f24a5f3345237a09cb61ed</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir, bool dirIsNormalized, int &amp;hint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupportTpl</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6d466e4422f53ce83ab804728f6bb0fe</anchor>
      <arglist>(const Shape0 *s0, const Shape1 *s1, const Matrix3f &amp;oR1, const Vec3f &amp;ot1, const Vec3f &amp;dir, Vec3f &amp;support0, Vec3f &amp;support1, support_func_guess_t &amp;hint, MinkowskiDiff::ShapeData data[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupportFuncTpl</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a00fee21604630023e0d66b2ebe4b648d</anchor>
      <arglist>(const MinkowskiDiff &amp;md, const Vec3f &amp;dir, bool dirIsNormalized, Vec3f &amp;support0, Vec3f &amp;support1, support_func_guess_t &amp;hint, MinkowskiDiff::ShapeData data[2])</arglist>
    </member>
    <member kind="function">
      <type>MinkowskiDiff::GetSupportFunction</type>
      <name>makeGetSupportFunction1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7e42073c044fa88122a4c82b7cbede80</anchor>
      <arglist>(const ShapeBase *s1, bool identity, Eigen::Array&lt; FCL_REAL, 1, 2 &gt; &amp;inflation, int linear_log_convex_threshold)</arglist>
    </member>
    <member kind="function">
      <type>MinkowskiDiff::GetSupportFunction</type>
      <name>makeGetSupportFunction0</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad08536916357d367774541a1d7b75fe5</anchor>
      <arglist>(const ShapeBase *s0, const ShapeBase *s1, bool identity, Eigen::Array&lt; FCL_REAL, 1, 2 &gt; &amp;inflation, int linear_log_convex_threshold)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClosestPoints</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details_1_1details.html</anchorfile>
      <anchor>aed8175363c4c90df76bdb9767d71dca6</anchor>
      <arglist>(const GJK::Simplex &amp;simplex, Vec3f &amp;w0, Vec3f &amp;w1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inflate</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details_1_1details.html</anchorfile>
      <anchor>a82b0462f84e63e1f5fa14ebe25995867</anchor>
      <arglist>(const MinkowskiDiff &amp;shape, Vec3f &amp;w0, Vec3f &amp;w1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>originToPoint</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad2e80c57d8891505864124e833e4dab8</anchor>
      <arglist>(const GJK::Simplex &amp;current, GJK::vertex_id_t a, const Vec3f &amp;A, GJK::Simplex &amp;next, Vec3f &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>originToSegment</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a42a2d924a37904deae0a7951675de17a</anchor>
      <arglist>(const GJK::Simplex &amp;current, GJK::vertex_id_t a, GJK::vertex_id_t b, const Vec3f &amp;A, const Vec3f &amp;B, const Vec3f &amp;AB, const FCL_REAL &amp;ABdotAO, GJK::Simplex &amp;next, Vec3f &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>originToTriangle</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4b0894d02ae510e77642eea0f75653f1</anchor>
      <arglist>(const GJK::Simplex &amp;current, GJK::vertex_id_t a, GJK::vertex_id_t b, GJK::vertex_id_t c, const Vec3f &amp;ABC, const FCL_REAL &amp;ABCdotAO, GJK::Simplex &amp;next, Vec3f &amp;ray)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>narrowphase.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/narrowphase/</path>
    <filename>narrowphase_8cpp.html</filename>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="geometric__shapes__utility_8h" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="intersect_8h" name="intersect.h" local="no" imported="no">hpp/fcl/internal/intersect.h</includes>
    <includes id="details_8h" name="details.h" local="yes" imported="no">details.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SHAPE_INTERSECT_INVERTED</name>
      <anchorfile>narrowphase_8cpp.html</anchorfile>
      <anchor>a51bcb783fde21802b09f865d44b17bab</anchor>
      <arglist>(Shape1, Shape2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>profile.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>profile_8cpp.html</filename>
    <includes id="profile_8h" name="profile.h" local="no" imported="no">hpp/fcl/profile.h</includes>
    <namespace>hpp</namespace>
  </compound>
  <compound kind="file">
    <name>convex.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/shape/</path>
    <filename>convex_8cpp.html</filename>
    <includes id="convex_8h" name="convex.h" local="no" imported="no">hpp/fcl/shape/convex.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>geometric_shapes.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/shape/</path>
    <filename>geometric__shapes_8cpp.html</filename>
    <includes id="geometric__shapes_8h" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="geometric__shapes__utility_8h" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>geometric_shapes_utility.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/shape/</path>
    <filename>geometric__shapes__utility_8cpp.html</filename>
    <includes id="geometric__shapes__utility_8h" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="BV__fitter_8h" name="BV_fitter.h" local="no" imported="no">hpp/fcl/internal/BV_fitter.h</includes>
    <includes id="tools_8h" name="tools.h" local="no" imported="no">hpp/fcl/internal/tools.h</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <namespace>hpp::fcl::details</namespace>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5a46cb7c77cd3836445bc15433501fdf</anchor>
      <arglist>(const Box &amp;box, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab00df9e9eada0f53c971e418f3b7f42a</anchor>
      <arglist>(const Sphere &amp;sphere, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab99bfe98937cf389da7d8956bafac6bb</anchor>
      <arglist>(const Capsule &amp;capsule, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a9d6c1a1814ddc3856e810c607003e8eb</anchor>
      <arglist>(const Cone &amp;cone, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ac8a1a1009ba7ded27d9b9d45419f966d</anchor>
      <arglist>(const Cylinder &amp;cylinder, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6532f22715e97791abde11d7737dea83</anchor>
      <arglist>(const ConvexBase &amp;convex, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aee54dbeda827577a869646eeab845698</anchor>
      <arglist>(const TriangleP &amp;triangle, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI Halfspace</type>
      <name>transform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acea5b7360b35ca7d2f645cbe265b846b</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI Plane</type>
      <name>transform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a869df3c83544b794997edf4221483f59</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7e5dccd855b2e03164a861085d1bcc8c</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac439854fc5c0f54d6d05dd476ca8adf8</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af63a3acef6a1a961a5563bdd4368e421</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac2741e82aa45d5e668a5f6beb9e575ea</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7d057bcd0bc931161aaf2cada8cba84b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a49c5250389b071ff48fd95272c0a6fee</anchor>
      <arglist>(const ConvexBase &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a65b9ffe994ef10c0a8417220cf8128bb</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aff6072402df5dfaf645a0787c61f5ea7</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa756e64cb895761eda9bf6b84c367267</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a62e8682fcab146b16376d0ee164897a8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acc29531b43787c3d787eee2f205d1e5d</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5e589885b7ce8302c967a8ee0bb48b90</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab7a78234dab23157bc13285d5ec1c34e</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae75f48642949abe72cf0a8536af4594b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8a7d52afadf8b5cb5210177f24b28cbc</anchor>
      <arglist>(const ConvexBase &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac19cf4bd5ddd03c43ad644a53a12766f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7c78518896db821ae4c252e9fa8584a2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a165618e6cd44517690b96b02d519d5ef</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae1dac581028f8a93e212767864f8091c</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af0ed4dad068cbc17368e6e0003da8bf8</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6119093dd05229ed0bbafb783b92416d</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a37581778c3f4d7a8c6aab74a0794fe4a</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a31a5196a276ce91cde2269144d96144b</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa592de4ec63a8446b7e5faa7aaaa4a7a</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f62d309b3eb540b231afd61400f11eb</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac832310f3d393d3fa459a4e89b04accd</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a285046016d23c6a9243ec1648fa1ee03</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a134493346e13d41a50f58c8c3b703805</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab3e987c7055c59c6c909d2eafc086ad5</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f4d9e15c1e1b0473d9ba1b60a0999ce</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad2ece30036a4f85e7c94c83cbc375440</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a389ea0f82667a14b50e3d06f73ddf65c</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a277ffcdbeb26ebc55199e6a406855dd6</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acc71a7af4b6e2e263856268cff862017</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1e0ae109d229233ad501f0ca44c0d83a</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a881ce55ecba092ac28c3e50dc9d251ac</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab8fc7100a8f801232d6edc17318ff4fd</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab73ba0d67fdb919b39b46212afadda5e</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f7c58989901ce4833565fbad1e941cc</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1d181bb550651b697fe967c65589bd20</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a60c2357a25853e76cee3c90c8fcfdb08</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac11f0f1e774f49eef7ce62cdf76e406b</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0a77f5fb3a5542a8894e703734674548</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a437d93b4db8e66f1eb3efb7240c39eea</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a223238cae76563da8fb18c186a74b2c3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traits_traversal.h</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/</path>
    <filename>traits__traversal_8h.html</filename>
    <includes id="collision__func__matrix_8h" name="collision_func_matrix.h" local="no" imported="no">hpp/fcl/collision_func_matrix.h</includes>
    <includes id="narrowphase_8h" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="collision__node_8h" name="collision_node.h" local="no" imported="no">../src/collision_node.h</includes>
    <includes id="traversal__node__setup_8h" name="traversal_node_setup.h" local="no" imported="no">hpp/fcl/internal/traversal_node_setup.h</includes>
    <class kind="struct">hpp::fcl::TraversalTraitsCollision</class>
    <class kind="struct">hpp::fcl::TraversalTraitsDistance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_recurse.cpp</name>
    <path>/home/pth/pth/model/Go2_simulator/src/controls/hpp-fcl/src/traversal/</path>
    <filename>traversal__recurse_8cpp.html</filename>
    <includes id="traversal__recurse_8h" name="traversal_recurse.h" local="no" imported="no">hpp/fcl/internal/traversal_recurse.h</includes>
    <class kind="struct">hpp::fcl::BVT</class>
    <class kind="struct">hpp::fcl::BVT_Comparer</class>
    <class kind="struct">hpp::fcl::BVTQ</class>
    <namespace>hpp</namespace>
    <namespace>hpp::fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a67bb215a85d574ba182029ca8528fde7</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionNonRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a53c37d0954037e1f11a391bfb71f52cc</anchor>
      <arglist>(CollisionTraversalNodeBase *node, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa845c64b800a6c5b227fc7cd02909e2e</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceQueueRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f6425035a5938182ff54571d684a79d</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagateBVHFrontListCollisionRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab6bf9046f5b5a43e1f5fef451bef310a</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;, CollisionResult &amp;result, BVHFrontList *front_list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::AABB</name>
    <filename>classhpp_1_1fcl_1_1AABB.html</filename>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab9b9351f304ecd9abbaeeec65807f546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0d0974d696d1dc02d0b35429d7701106</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7c168540fedc8f401997b80477f17b76</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga62c00a30c6e0702f713c436a6d793567</anchor>
      <arglist>(const AABB &amp;core, const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad102754f94c9c2c461faedad14da0546</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0e64835bd7589e99a58389da5dae18ba</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga64a55b21bb516a03d8fead9b55b40b56</anchor>
      <arglist>(const AABB &amp;other, AABB &amp;overlap_part) const</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gade72189539494c995941d034bd212b8c</anchor>
      <arglist>(const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaca6805cee7755a8b90feac79df3cc437</anchor>
      <arglist>(const AABB &amp;core, FCL_REAL ratio)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad94862930432cb74783d0a461927bfa6</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7ae796de9a15fe4083cffcac6d2370cb</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga08308d2e5f168432faaff5e882637ef6</anchor>
      <arglist>(const AABB &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d4bc7b9e3c225ba091f1bff7a978b9c</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae70216d09cca8d159da5b01336edc826</anchor>
      <arglist>(const AABB &amp;other, Vec3f *P, Vec3f *Q) const</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7c13494e2b7353de97f6d92a2a30d1e6</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga10681d706f476e22c0d7b4bdfddfab96</anchor>
      <arglist>(const AABB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga53962f361a4d357bcaf2b2bd2b6e42f3</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafa1d7557cdf27cb40b42b4cba15ff16a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf1a3847f0296afe7fb7af990b66f0c7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6f0116951112bbd86cad00bac3257bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gadebef8a965531d53e250e453224c7433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga39c678dd40e46017689146c03a6c3a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41514cfdd5b18f203e576811dbff88f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>min_</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga8c9104bd2301ea2c59dfc655ba0eb42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>max_</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga023ee7b9a78804c86f0a98aee5834b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad94862930432cb74783d0a461927bfa6</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7ae796de9a15fe4083cffcac6d2370cb</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga08308d2e5f168432faaff5e882637ef6</anchor>
      <arglist>(const AABB &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d4bc7b9e3c225ba091f1bff7a978b9c</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae70216d09cca8d159da5b01336edc826</anchor>
      <arglist>(const AABB &amp;other, Vec3f *P, Vec3f *Q) const</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7c13494e2b7353de97f6d92a2a30d1e6</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga10681d706f476e22c0d7b4bdfddfab96</anchor>
      <arglist>(const AABB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga53962f361a4d357bcaf2b2bd2b6e42f3</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafa1d7557cdf27cb40b42b4cba15ff16a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf1a3847f0296afe7fb7af990b66f0c7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6f0116951112bbd86cad00bac3257bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gadebef8a965531d53e250e453224c7433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga39c678dd40e46017689146c03a6c3a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41514cfdd5b18f203e576811dbff88f0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Box</name>
    <filename>classhpp_1_1fcl_1_1Box.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2cce20c67069f8ea9903f1a4acee9f5d</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga649acee9891aedf1cc76a52447d92b5c</anchor>
      <arglist>(const Vec3f &amp;side_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaadb5563a59b8fcbcd2027ae9810d37e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga06530eb0fade074c2dc56eb367b4f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gab04996138f2b4db7104e8937a65bac5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga156862e04f0dac3c9e22dd3d9062c6a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5fb307840a884b6e9deba1d7b4f13fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>halfSide</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8d398a952424a68f8c2db119fd2d6b31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter</name>
    <filename>classhpp_1_1fcl_1_1BVFitter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>BV</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitter.html</anchorfile>
      <anchor>a8569d76bdf7390678bd725953c9afa12</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; AABB &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitter_3_01AABB_01_4.html</filename>
    <base>BVFitterTpl&lt; AABB &gt;</base>
    <member kind="function">
      <type>AABB</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitter_3_01AABB_01_4.html</anchorfile>
      <anchor>a2db08006a32c204cf69152ac58b754e8</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; kIOS &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitter_3_01kIOS_01_4.html</filename>
    <base>BVFitterTpl&lt; kIOS &gt;</base>
    <member kind="function">
      <type>kIOS</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitter_3_01kIOS_01_4.html</anchorfile>
      <anchor>a874d96e7ff3b7ed5fd46f629729488e6</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; OBB &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitter_3_01OBB_01_4.html</filename>
    <base>BVFitterTpl&lt; OBB &gt;</base>
    <member kind="function">
      <type>OBB</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitter_3_01OBB_01_4.html</anchorfile>
      <anchor>afbe380fac71c8057bd54b090dd134452</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; OBBRSS &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitter_3_01OBBRSS_01_4.html</filename>
    <base>BVFitterTpl&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type>OBBRSS</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitter_3_01OBBRSS_01_4.html</anchorfile>
      <anchor>a72f3f61e00301abcb4721bd47ecd771a</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitter&lt; RSS &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitter_3_01RSS_01_4.html</filename>
    <base>BVFitterTpl&lt; RSS &gt;</base>
    <member kind="function">
      <type>RSS</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitter_3_01RSS_01_4.html</anchorfile>
      <anchor>a58efba308cf646fc072311eaf1fb319f</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVFitterTpl</name>
    <filename>classhpp_1_1fcl_1_1BVFitterTpl.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitterTpl</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>af8de83d9d51a3727949dbfbe07f04035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a89cfdd58a6f98e851b4c2897213dd95c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a2192c129955d6be5bf372df2803cf9cd</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BV</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a5e96b80a3b1579a279f4f5ea060ed284</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a28085e23abbfc034e8b1d199e9096d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a14dd30d1ae3c96a62a77bb4447eccac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a4fbd7d2271e3b0afc523d53b0d017c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a449d3f5bb3faa8e72aeddc2bd20a7305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BVHModelType</type>
      <name>type</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a1099ecacd34a16ec6bd23e80d61d8b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterTpl&lt; AABB &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitterTpl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitterTpl</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>af8de83d9d51a3727949dbfbe07f04035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a89cfdd58a6f98e851b4c2897213dd95c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a2192c129955d6be5bf372df2803cf9cd</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AABB</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a5e96b80a3b1579a279f4f5ea060ed284</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a28085e23abbfc034e8b1d199e9096d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a14dd30d1ae3c96a62a77bb4447eccac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a4fbd7d2271e3b0afc523d53b0d017c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a449d3f5bb3faa8e72aeddc2bd20a7305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BVHModelType</type>
      <name>type</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a1099ecacd34a16ec6bd23e80d61d8b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterTpl&lt; kIOS &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitterTpl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitterTpl</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>af8de83d9d51a3727949dbfbe07f04035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a89cfdd58a6f98e851b4c2897213dd95c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a2192c129955d6be5bf372df2803cf9cd</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual kIOS</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a5e96b80a3b1579a279f4f5ea060ed284</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a28085e23abbfc034e8b1d199e9096d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a14dd30d1ae3c96a62a77bb4447eccac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a4fbd7d2271e3b0afc523d53b0d017c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a449d3f5bb3faa8e72aeddc2bd20a7305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BVHModelType</type>
      <name>type</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a1099ecacd34a16ec6bd23e80d61d8b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterTpl&lt; OBB &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitterTpl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitterTpl</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>af8de83d9d51a3727949dbfbe07f04035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a89cfdd58a6f98e851b4c2897213dd95c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a2192c129955d6be5bf372df2803cf9cd</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBB</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a5e96b80a3b1579a279f4f5ea060ed284</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a28085e23abbfc034e8b1d199e9096d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a14dd30d1ae3c96a62a77bb4447eccac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a4fbd7d2271e3b0afc523d53b0d017c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a449d3f5bb3faa8e72aeddc2bd20a7305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BVHModelType</type>
      <name>type</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a1099ecacd34a16ec6bd23e80d61d8b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterTpl&lt; OBBRSS &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitterTpl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitterTpl</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>af8de83d9d51a3727949dbfbe07f04035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a89cfdd58a6f98e851b4c2897213dd95c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a2192c129955d6be5bf372df2803cf9cd</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBBRSS</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a5e96b80a3b1579a279f4f5ea060ed284</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a28085e23abbfc034e8b1d199e9096d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a14dd30d1ae3c96a62a77bb4447eccac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a4fbd7d2271e3b0afc523d53b0d017c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a449d3f5bb3faa8e72aeddc2bd20a7305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BVHModelType</type>
      <name>type</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a1099ecacd34a16ec6bd23e80d61d8b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterTpl&lt; RSS &gt;</name>
    <filename>classhpp_1_1fcl_1_1BVFitterTpl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitterTpl</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>af8de83d9d51a3727949dbfbe07f04035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a89cfdd58a6f98e851b4c2897213dd95c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a2192c129955d6be5bf372df2803cf9cd</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RSS</type>
      <name>fit</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a5e96b80a3b1579a279f4f5ea060ed284</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a28085e23abbfc034e8b1d199e9096d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a14dd30d1ae3c96a62a77bb4447eccac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a4fbd7d2271e3b0afc523d53b0d017c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a449d3f5bb3faa8e72aeddc2bd20a7305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BVHModelType</type>
      <name>type</name>
      <anchorfile>classhpp_1_1fcl_1_1BVFitterTpl.html</anchorfile>
      <anchor>a1099ecacd34a16ec6bd23e80d61d8b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::bvh_shape_traits</name>
    <filename>structhpp_1_1fcl_1_1details_1_1bvh__shape__traits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1bvh__shape__traits.html</anchorfile>
      <anchor>af9c4cebcca2b9169a03534755f8d75d8a900b44816a761cfb557068d889c3753b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Options</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1bvh__shape__traits.html</anchorfile>
      <anchor>af9c4cebcca2b9169a03534755f8d75d8a900b44816a761cfb557068d889c3753b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHFrontNode</name>
    <filename>structhpp_1_1fcl_1_1BVHFrontNode.html</filename>
    <member kind="function">
      <type></type>
      <name>BVHFrontNode</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHFrontNode.html</anchorfile>
      <anchor>af30e6d75ac2aacb932cd25f224100958</anchor>
      <arglist>(int left_, int right_)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>left</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHFrontNode.html</anchorfile>
      <anchor>ad487c132dd304975e7b72c82af33f153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>right</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHFrontNode.html</anchorfile>
      <anchor>ab8b0001a51c00688e48329df2924c288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHFrontNode.html</anchorfile>
      <anchor>a9d6c0081889bda1b5c19575fbf872faf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHModel</name>
    <filename>classhpp_1_1fcl_1_1BVHModel.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::BVHModelBase</base>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ab72162dc80813b966ab06d174390ccab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a27d3b9e5ea9bd353fd7dad5b1dea227d</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a0f43c0c69f6885a89db68313062e6d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; BV &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>aaf328245ecaa6b70bdc028dd527b83ab</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; BV &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>aef79759db10fdc8b5d48dfc41cb68131</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a48b47cfd3055ca9864c3251e82d700d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ade3024398a7b186d09a80bfe1668e40a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ae9e82dcef0e759a0083dda19e67d0841</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a3dd71ab415f89f0593bff51cc5e70dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a2bce7817865aaa281bee92b8f84823c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a9b37e05e1be7bfe9b257ec7fd0c2ffae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>afab6710eb16f16b178901543b7dc0666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ae7c548ffcc8107fde03709d859fb2c80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>aa3812d99088fb8b4a306b5fa0e61e68f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ac4f69048ccc6fbe3eafac2e55b82a44b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a9f6fa9f6d041e48d163ddfaf7acd4270</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ab0bb54e2d221708d28a93f5ee61e7710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a2bce7817865aaa281bee92b8f84823c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a9b37e05e1be7bfe9b257ec7fd0c2ffae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>afab6710eb16f16b178901543b7dc0666</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ae7c548ffcc8107fde03709d859fb2c80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>aa3812d99088fb8b4a306b5fa0e61e68f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ac4f69048ccc6fbe3eafac2e55b82a44b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a9f6fa9f6d041e48d163ddfaf7acd4270</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>ab0bb54e2d221708d28a93f5ee61e7710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitter&lt; BV &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>a2f34daaaabdb88d25d694a1c3c6d089b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitter&lt; BV &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModel.html</anchorfile>
      <anchor>aec314f35268483e29e2e4af9c501cd32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVHModelBase</name>
    <filename>classhpp_1_1fcl_1_1BVHModelBase.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a876bc30e795cb51c20d99e92448bf710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModelBase</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ad20c32ff71cdb009592553f579281801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModelBase</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a9de658a6280af5004d88ea0b92bc51db</anchor>
      <arglist>(const BVHModelBase &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVHModelBase</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a95e06648a07e1c863c9aa62188a92c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>aec2c6d86fc3be81b24de5060f16ac03e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ad3d353494f0e6c123c0eb73bc532454b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ad9dfd9ae2c114cf79c7f4c921d768a75</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ad9a1b2121793c373245e04f5ecc19200</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a90ca86601cb6011effc1291c1952427c</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a8172c2c38e3116f9d6fadc392c1c0235</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a4b26727d40bd677ffeaef05ea434bb86</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>aca0d8c8b9b9f28f73f5ee08ad4e4ac54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a891675828567b1b52b6a3b3867ef3a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a9da9bdd2e99da4cabe1d42d4fa2e2da1</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a149223617147f5d119d3d292dccfcd3f</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a1e22108f070ebf79144c49b6ab603f3e</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a2fb0fd46ad783068e4630988ef162271</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a5090d3232076e8e54b683a43a564c9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a38a5df706ae15b4a16abd85a2cbda09a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a20483aaafd11cd468351d38a499a75f8</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>aec55fc0a26c7b209d4cd5e6b744c27d0</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>adcf46022ed223207c9c77779372d85a2</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildConvexRepresentation</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>af791a5582c5442c51d47e60bb01ada97</anchor>
      <arglist>(bool share_memory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildConvexHull</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>adf514ca3a6322155bf02d6651398fc03</anchor>
      <arglist>(bool keepTriangle, const char *qhullCommand=NULL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>memUsage</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a0b09d8f4a54c50c756b6d299e3efb5a8</anchor>
      <arglist>(int msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeParentRelative</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a58e7bef92af457c058b3006b53d1735a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>af0bfd3d7ad19b91002eafb344377fa6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ae84c5cfed28e175185fcc93024cb8094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ab7586275e7ca8c7554d361ebcd3f2c36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ab3eedf1d1b8714953246cde8bdfb5a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a24bc92b3d6242293daffea73b6647a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a07e673c07cebf1313fa5788facda837e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a99969450df509e17048b18bca73c5d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>adb1188bd2ab26cfca968842bb3a43e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a573056cd3688c0be64539fbead27442e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; ConvexBase &gt;</type>
      <name>convex</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a5346f059c43bcc588730fdb0b2b470f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>deleteBVs</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ade8a9d6c5287a3805ed07710232056d5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>allocateBVs</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a9b8da49bc5136b6fb2272f24f46dcfda</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>buildTree</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>ab02e230288dd61b579bafc3925610a36</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>refitTree</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a74ef1a484571e6eca7940b9e102ac6bc</anchor>
      <arglist>(bool bottomup)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_tris_allocated</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>aaacbb16786c11e16f04600f8ee0e5b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_vertices_allocated</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a7dde0d6e38337f9f70c9cc475af5ffdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_vertex_updated</name>
      <anchorfile>classhpp_1_1fcl_1_1BVHModelBase.html</anchorfile>
      <anchor>a121a84360ebc63cda94bafdb34bd4fcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHShapeCollider</name>
    <filename>structhpp_1_1fcl_1_1BVHShapeCollider.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>collide</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeCollider.html</anchorfile>
      <anchor>aed09ea4cc6bddad5dcc002056516cf77</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>aligned</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeCollider.html</anchorfile>
      <anchor>aebd5cf1dc707aaa1e7bda068ae071d0e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>oriented</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeCollider.html</anchorfile>
      <anchor>afcf4fce39fa11fbe0e01e962feeaaae9</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHShapeDistancer</name>
    <filename>structhpp_1_1fcl_1_1BVHShapeDistancer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>distance</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeDistancer.html</anchorfile>
      <anchor>af3b6918fad4927599b2c480e4247cd86</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHShapeDistancer&lt; kIOS, T_SH &gt;</name>
    <filename>structhpp_1_1fcl_1_1BVHShapeDistancer_3_01kIOS_00_01T__SH_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>distance</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeDistancer_3_01kIOS_00_01T__SH_01_4.html</anchorfile>
      <anchor>ad3819a59970b2cd51bef95be9a334a70</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHShapeDistancer&lt; OBBRSS, T_SH &gt;</name>
    <filename>structhpp_1_1fcl_1_1BVHShapeDistancer_3_01OBBRSS_00_01T__SH_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>distance</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeDistancer_3_01OBBRSS_00_01T__SH_01_4.html</anchorfile>
      <anchor>ad868a232b15ae9a204067c0969a68959</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVHShapeDistancer&lt; RSS, T_SH &gt;</name>
    <filename>structhpp_1_1fcl_1_1BVHShapeDistancer_3_01RSS_00_01T__SH_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>distance</name>
      <anchorfile>structhpp_1_1fcl_1_1BVHShapeDistancer_3_01RSS_00_01T__SH_01_4.html</anchorfile>
      <anchor>ac34954a18b8749b9054b53084fd911d0</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVNode</name>
    <filename>structhpp_1_1fcl_1_1BVNode.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gadc38790a18c0cbcb31a9824cd213a5db</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gade315282b9b63c1f7f9ddd3a9f5e6569</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga378f64a748f9bde68683bb1307a347cf</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaab550aa92f9110a5bf7292023a7c5ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga7e5198a231d3152b1439867151960392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>structhpp_1_1fcl_1_1BVNode.html</anchorfile>
      <anchor>a2d855f84e4e5e033f050f124f707679a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>structhpp_1_1fcl_1_1BVNode.html</anchorfile>
      <anchor>a845439922ce21c27506c3b2bb05bbda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>structhpp_1_1fcl_1_1BVNode.html</anchorfile>
      <anchor>a20ff995dbd7acc5a5eeb90158380c174</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVNodeBase</name>
    <filename>structhpp_1_1fcl_1_1BVNodeBase.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gac8d9c480d12fa9c8684364c31cd5f885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>primitiveId</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gad9f4e6cff698513a0c4e256380a6ccae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>leftChild</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga2169cb04b214dd91baa884acc692d215</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rightChild</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga1ee1a9fbd4b3b1f05e5c9cd6d36c923c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_child</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga07267c52a1c2dd1a6d2ab775514acf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_primitive</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga413489df45a14c2b04148db5dfb1669b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_primitives</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga3c3f18494e34d445da2448e924c2c60c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::BVSplitter</name>
    <filename>classhpp_1_1fcl_1_1BVSplitter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BVSplitter</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a4c23f348343cde3387ba9740b9107350</anchor>
      <arglist>(SplitMethodType method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVSplitter</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a1b5160ef77546bc5a738dd05fcb857c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a6753553731dd23a21d4b44e3873dd5dc</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRule</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a02ffe587ccc032fe8f637786c1b39eac</anchor>
      <arglist>(const BV &amp;bv, unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>ab856b3409ddf03b39bb3971eacfbb50d</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>aa9646e044a1c32db5981aeb7cc69de23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a9c2033188b9159948074d6475cc448b2</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a6f7bfd6be2c625bb95c384bc57ba47d8</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>afa80f890f223fa3ed16a4b4adf805a66</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a35ddf459482e403347aa7af888ebd4c8</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a9c2033188b9159948074d6475cc448b2</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a6f7bfd6be2c625bb95c384bc57ba47d8</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>afa80f890f223fa3ed16a4b4adf805a66</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>classhpp_1_1fcl_1_1BVSplitter.html</anchorfile>
      <anchor>a35ddf459482e403347aa7af888ebd4c8</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVT</name>
    <filename>structhpp_1_1fcl_1_1BVT.html</filename>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>structhpp_1_1fcl_1_1BVT.html</anchorfile>
      <anchor>a56056a4a4205ff4d5bd94af0c7690122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>structhpp_1_1fcl_1_1BVT.html</anchorfile>
      <anchor>ac2d1798940abdb3079222b369c1a752d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>structhpp_1_1fcl_1_1BVT.html</anchorfile>
      <anchor>afdaeb58316972b17b05ac387e9ad0ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVT_Comparer</name>
    <filename>structhpp_1_1fcl_1_1BVT__Comparer.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structhpp_1_1fcl_1_1BVT__Comparer.html</anchorfile>
      <anchor>a2082c392645521fb7e7cf6a902e614a8</anchor>
      <arglist>(const BVT &amp;lhs, const BVT &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::BVTQ</name>
    <filename>structhpp_1_1fcl_1_1BVTQ.html</filename>
    <member kind="function">
      <type></type>
      <name>BVTQ</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>a2dce2181fc643d84175af2fb3632f1cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>ab6bd29f539df35a9a7021dad198560ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>a88fa6f6e6d5356473911b894c576120d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BVT &amp;</type>
      <name>top</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>adda8c7156b5a72161a474a5346b4f5cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>a541fc391d0fb4d1828ad53328485904d</anchor>
      <arglist>(const BVT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>a56303872b034b58217eb5648ad4ef47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>a52d39b5f2dbd6989540f70d788603d0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::priority_queue&lt; BVT, std::vector&lt; BVT &gt;, BVT_Comparer &gt;</type>
      <name>pq</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>ad0e75f81c9db94d69ed2488a00483f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>qsize</name>
      <anchorfile>structhpp_1_1fcl_1_1BVTQ.html</anchorfile>
      <anchor>a52efcd0dd30cfa13b2bc54eac8f7f752</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CachedMeshLoader</name>
    <filename>classhpp_1_1fcl_1_1CachedMeshLoader.html</filename>
    <base>hpp::fcl::MeshLoader</base>
    <class kind="struct">hpp::fcl::CachedMeshLoader::Key</class>
    <member kind="typedef">
      <type>std::map&lt; Key, BVHModelPtr_t &gt;</type>
      <name>Cache_t</name>
      <anchorfile>classhpp_1_1fcl_1_1CachedMeshLoader.html</anchorfile>
      <anchor>a03c70330d59b08558eaf5d06fb0b6855</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CachedMeshLoader</name>
      <anchorfile>classhpp_1_1fcl_1_1CachedMeshLoader.html</anchorfile>
      <anchor>a8a6a1de1b77e06f515701dc6f6fb279d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedMeshLoader</name>
      <anchorfile>classhpp_1_1fcl_1_1CachedMeshLoader.html</anchorfile>
      <anchor>ab0d59668ed5214c97443bd872826c04c</anchor>
      <arglist>(const NODE_TYPE &amp;bvType=BV_OBBRSS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BVHModelPtr_t</type>
      <name>load</name>
      <anchorfile>classhpp_1_1fcl_1_1CachedMeshLoader.html</anchorfile>
      <anchor>a9ad981c0a3b8b317f3e3e16a8573dd41</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>const Cache_t</type>
      <name>cache</name>
      <anchorfile>classhpp_1_1fcl_1_1CachedMeshLoader.html</anchorfile>
      <anchor>a601b72063a84d70690b88174912c1dbf</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Capsule</name>
    <filename>classhpp_1_1fcl_1_1Capsule.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Capsule</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gad7a6f6f01af5a0aa5cabdd0d1c34da05</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga822f6ab334f174d78b446b0090af0feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2b073f5b94c32c9300c657cf9ed7dfc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga44f7b57b282da9e39bc327dc8bb89457</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaa77def9c91668ca33d84f4ae1152285e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga580f94067308b5d96e4080b849176155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>halfLength</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga0aadb269798424fcd97d5c3b6e07ffef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CollisionFunctionMatrix</name>
    <filename>structhpp_1_1fcl_1_1CollisionFunctionMatrix.html</filename>
    <member kind="typedef">
      <type>std::size_t(*</type>
      <name>CollisionFunc</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionFunctionMatrix.html</anchorfile>
      <anchor>a055e606eedbdbbac54bf59dd039d4f37</anchor>
      <arglist>)(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionFunctionMatrix</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionFunctionMatrix.html</anchorfile>
      <anchor>a8043aba5a32287d8b765dbe06291d0e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CollisionFunc</type>
      <name>collision_matrix</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionFunctionMatrix.html</anchorfile>
      <anchor>a5d319bf5dd48d9a6cc03e3b2964ce5ab</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CollisionGeometry</name>
    <filename>classhpp_1_1fcl_1_1CollisionGeometry.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gace98e04016492413de122f457de81270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga9916ac5633d3a6f1ea35766130bfc534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga71058b863f5cdb4a933834e617d0802a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf8afd3a71a067b2a5573274a78026f9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gad5e184908cb836fc1ca631947a4caaf0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga154d7c388170bad969abbc610515b3cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gacc43b1da621d59d6f391ab170f87c1d2</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccupied</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga3ef6dc48afb594aba10e7ceb07824805</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFree</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga7957c87d6a0c5c839fd8925d82e76e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncertain</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga1a796acc1b6396961470aad0530a6501</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga08d46e9dd6181856e92d347847433216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga8ee3af214b71c2ad6fffdfe38437a1f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gab03f8191f1bed8536bdc308e373f8b28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertiaRelatedToCOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaa10d2495d7d66335856b3bff0760bb1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>aabb_center</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gabce28e50b4bdf8b4ae5171f3ba54cbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>aabb_radius</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga5fef2c57c9056c189a6642fd3caa2805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AABB</type>
      <name>aabb_local</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga365b825a84d3455e2dd921d716ba9fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga774ceb428b7ade4a21e9366b6db7c503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga337b0a467ef877ffa91a53953f7665b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_occupied</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga5c4e44d08f6c56ee9d3df994ae936588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_free</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga78ea34df55426f19b7fecf0576e24a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::CollisionObject</name>
    <filename>classhpp_1_1fcl_1_1CollisionObject.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6b435bb536f60c253e1d50d38d1f37f6</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga9e534a28a6f1423b318b048e887f6cae</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gabe1900848c471e4696745cdbbb9c98e8</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf013adb130aab42bdb84c2814f109e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gab9b498e019e246f99099e8a556d68121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gac1cacfa4dbc114433afcf97e1c29958e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AABB &amp;</type>
      <name>getAABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gae7262562accd72c3b8e0bf3276a01b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaaa574c2e5842f27a9e6fa994a85b45b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gac7ba9a39a0b211ed2b6361f38868bdbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga36e428721566adb87e7070bfad78d59d</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga34fe359b13b0741f3f6ae837435a510a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaeb183dcc9d1635c47d2b739bac51b5e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>getTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga20020315bc9141e04741aa0ca283a853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaddf13c77f0ccea6ab0cf926433c3ed29</anchor>
      <arglist>(const Matrix3f &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga8328ce08a3803cf6dbcd99bc20c4ce71</anchor>
      <arglist>(const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga8779cd6f3c17e8368413a3cf5b680d79</anchor>
      <arglist>(const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6af8b793a0a68da0d650918381b911e4</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentityTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga466657d0dce209a9b72f7805712712c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentityTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gabc58df8d6ec5adaf9b0dfcc637edd56b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; const CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf037b948e299c8d1db45604b9e53e3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga9266229d30eacbb09c2134021350d9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>cgeom</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga24181814d7b46f9121ec1ae3a75f9b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>cgeom_const</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaab38391f887ca8afe702eff7175c075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>t</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gafcd3641c6c9864516c9a7c51d0b6dfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AABB</type>
      <name>aabb</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf322bc0695eeca5db4e7502e76f004ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga91b60d341dc91213222ced8272e317e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CollisionRequest</name>
    <filename>structhpp_1_1fcl_1_1CollisionRequest.html</filename>
    <base>hpp::fcl::QueryRequest</base>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>acb5d4f38ce60f8dfd325d03e09f90e58</anchor>
      <arglist>(const CollisionRequestFlag flag, size_t num_max_contacts_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>adef8ff1994cca1ed62f3d8f492eba383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>ad7ca43575de56556e332de8fe3716998</anchor>
      <arglist>(const CollisionResult &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>add8510636bf2e80db21ef86f0eabcc86</anchor>
      <arglist>(const CollisionRequest &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>num_max_contacts</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>a1edd2fe4d5eba88c1e01387d282893e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_contact</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>acc5306791907c0d3afe4e40ae6febd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_distance_lower_bound</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>a47a5bea6501d2e6cb624c93a93183e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>security_margin</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>acc1c187d850a8a9e76d0ca9a56320963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>break_distance</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionRequest.html</anchorfile>
      <anchor>aec442e21a1066f449dd8f638203bd3bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CollisionResult</name>
    <filename>structhpp_1_1fcl_1_1CollisionResult.html</filename>
    <base>hpp::fcl::QueryResult</base>
    <member kind="function">
      <type></type>
      <name>CollisionResult</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>ae8b43abc95c4b37674babb4123839f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistanceLowerBound</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a45c2baa2ac4477ede53732fd99e00312</anchor>
      <arglist>(const FCL_REAL &amp;distance_lower_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContact</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a4cb5a20016c97dc1cb3d825b06a6034b</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>ae45d6f3ea15ccadcb1bdd0b95561a3b9</anchor>
      <arglist>(const CollisionResult &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollision</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a53e0164d9eeed53f06126d78fae86710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numContacts</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>ae8e4e3eb26880a499f21f6dec2233497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>getContact</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a5113595f92f897e16a3595c5c557f780</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContacts</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a68de82e06d33597d13c5c738d48b27ef</anchor>
      <arglist>(std::vector&lt; Contact &gt; &amp;contacts_) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a0dee942b5c3437d2202ad63b4fda4a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapObjects</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>afcac971854fc425d43296f2ad49460e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance_lower_bound</name>
      <anchorfile>structhpp_1_1fcl_1_1CollisionResult.html</anchorfile>
      <anchor>a739e73375184642aa873bf83eb43ef5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ComputeCollision</name>
    <filename>classhpp_1_1fcl_1_1ComputeCollision.html</filename>
    <member kind="function">
      <type></type>
      <name>ComputeCollision</name>
      <anchorfile>classhpp_1_1fcl_1_1ComputeCollision.html</anchorfile>
      <anchor>a909bb7b7c904ea2ff1ac35d80bdcfc34</anchor>
      <arglist>(const CollisionGeometry *o1, const CollisionGeometry *o2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>classhpp_1_1fcl_1_1ComputeCollision.html</anchorfile>
      <anchor>ad48bef3ee4a1a06e5e2cc014d357b4f7</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>classhpp_1_1fcl_1_1ComputeCollision.html</anchorfile>
      <anchor>a6b4ba34e5b8c27e0c923fba03aee6b8a</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ComputeDistance</name>
    <filename>classhpp_1_1fcl_1_1ComputeDistance.html</filename>
    <member kind="function">
      <type></type>
      <name>ComputeDistance</name>
      <anchorfile>classhpp_1_1fcl_1_1ComputeDistance.html</anchorfile>
      <anchor>a38d7e1853753eb7c2cd7fcb16c5af027</anchor>
      <arglist>(const CollisionGeometry *o1, const CollisionGeometry *o2)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator()</name>
      <anchorfile>classhpp_1_1fcl_1_1ComputeDistance.html</anchorfile>
      <anchor>a7ef622283a09448fed68b27765ad55a3</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator()</name>
      <anchorfile>classhpp_1_1fcl_1_1ComputeDistance.html</anchorfile>
      <anchor>a0c2c1e7c472b16f40c38484063b831d1</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Cone</name>
    <filename>classhpp_1_1fcl_1_1Cone.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gad365b76a69da25cd767741ca72039c4b</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga94e951be4411c10d45696bf43207a716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gadfd495912714a16419e8b6f0e75a58c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga051e62681b8b95cbe94a5bf6d20c4539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2fba1b904d84fc6368aa2377a6fa2f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga88f3817b1fc0cfb961f98bd3db3a4099</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga9b7cff69c31230235da6edae78afe0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>halfLength</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga752e49767243d19aa11722f88f141401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::Contact</name>
    <filename>structhpp_1_1fcl_1_1Contact.html</filename>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a1164f84783a6ac9831302c6d291f270b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>af2bd33820f619ad77893430bf0608295</anchor>
      <arglist>(const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a5dbdb0c6703f0c660a17331b15b10666</anchor>
      <arglist>(const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_, const Vec3f &amp;pos_, const Vec3f &amp;normal_, FCL_REAL depth_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>aeeec867a8f84cd53958c48dac9204617</anchor>
      <arglist>(const Contact &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a6e39b9e356d59b8cb78a7e65b326c3ab</anchor>
      <arglist>(const Contact &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>aec02571f519835d7d4d83f0732d07518</anchor>
      <arglist>(const Contact &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o1</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>ab7f868ffd3be1efb63194569aa0ed475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o2</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>ab305f6b0d9ee515660ebd5da4490e414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a471b7111086a75be10354b5d2fd1b9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a6897f1d3f59f34bc63d15b535b737885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>ac566d8eeb0cf18a5d4717f3481ef11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>pos</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a3338540008175b7b0cce5f14d508e087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>penetration_depth</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>a00139072f90f5f5b937258e320c7372e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONE</name>
      <anchorfile>structhpp_1_1fcl_1_1Contact.html</anchorfile>
      <anchor>aca21844ff1cdbb2c9c0a9b062ba64728</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::ContactPoint</name>
    <filename>structhpp_1_1fcl_1_1details_1_1ContactPoint.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactPoint</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1ContactPoint.html</anchorfile>
      <anchor>a7e7337a7a20f1be724383e546d3c6246</anchor>
      <arglist>(const Vec3f &amp;n, const Vec3f &amp;p, FCL_REAL d)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1ContactPoint.html</anchorfile>
      <anchor>a6b13ef2e40a5cf64955c551e7702891e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>point</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1ContactPoint.html</anchorfile>
      <anchor>adb5d5774e7d4bf81a3b6a76f60a0edc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1ContactPoint.html</anchorfile>
      <anchor>a316d17bdbc4d5d165ed9ef92c7059cfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Convex</name>
    <filename>classhpp_1_1fcl_1_1Convex.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::ConvexBase</base>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>a2af3eb7fd032cef0d48be2e2ab40bafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>a0d1feaddbf89e95d51d6952af715db60</anchor>
      <arglist>(bool ownStorage, Vec3f *points_, int num_points_, PolygonT *polygons_, int num_polygons_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>ad4c1a24bdcc123b4a70883a455ab99ea</anchor>
      <arglist>(const Convex &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Convex</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>a6f15a88f462393fea4127fd35abab9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>afa76317c9344211ed9b9a08088b14d8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>abddffe3e84e2b058444ff8d1029f297c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>ae7f260cf9434cc8da17c7fd14c8a8c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>PolygonT *</type>
      <name>polygons</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>ae60c930da23d9c85ac98f8f49e4ff026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_polygons</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>a5ec4006d6990c9f0449742d23aeb6c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNeighbors</name>
      <anchorfile>classhpp_1_1fcl_1_1Convex.html</anchorfile>
      <anchor>af4767618d2f5d39be5f23b3f48184434</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ConvexBase</name>
    <filename>classhpp_1_1fcl_1_1ConvexBase.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <class kind="struct">hpp::fcl::ConvexBase::Neighbors</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConvexBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gacf65ec48fb78842d0d24866b3de34499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga052f3951626b121cbe95537222950871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga231fb00e3495e85f903054eb8eba3b63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexBase *</type>
      <name>convexHull</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gae9275b4ac17e0067b2ba67fafbf95208</anchor>
      <arglist>(const Vec3f *points, int num_points, bool keepTriangles, const char *qhullCommand=NULL)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>points</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga1ad221fdbd753e71608ead4e5b15e081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_points</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga9a7b50dbdaee019ec2838dd3b841cca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Neighbors *</type>
      <name>neighbors</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga78b891b76250bf45152ba758c229f707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8d868d8db88738c0d90211112209084d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvexBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2053d5f0f92e60b65db6f064a41afe30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga6cf3206865f49748971db7db5666c3ac</anchor>
      <arglist>(bool ownStorage, Vec3f *points_, int num_points_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvexBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga9fc410e6cac1c0f28b51417e5689f0a9</anchor>
      <arglist>(const ConvexBase &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int *</type>
      <name>nneighbors_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga3d24e69f6f2014b586f0ed02e5a151fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>own_storage_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga629a8599bf39ae7419c53b2c982beb45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Cylinder</name>
    <filename>classhpp_1_1fcl_1_1Cylinder.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga729305aad6a4a6b57bc94e644299c8d2</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga34cc22903117ab6451d0517ec5e1bb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gae726105b7911129851a8bb0047e84db6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga19140a65f4eef554905d449adf0cc9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga377a5cf38d065e9cd9ba7ecff53dd991</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaa95961a6c6f693e6f47836ebeaa00f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>halfLength</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga464a89f9a845ec6e767aaf185ecc226a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::DistanceFunctionMatrix</name>
    <filename>structhpp_1_1fcl_1_1DistanceFunctionMatrix.html</filename>
    <member kind="typedef">
      <type>FCL_REAL(*</type>
      <name>DistanceFunc</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceFunctionMatrix.html</anchorfile>
      <anchor>a4accd94541abb17296bbf3cf3717e781</anchor>
      <arglist>)(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceFunctionMatrix</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceFunctionMatrix.html</anchorfile>
      <anchor>a29ab93a8f16a504158571480857dadf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>DistanceFunc</type>
      <name>distance_matrix</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceFunctionMatrix.html</anchorfile>
      <anchor>aab24662b68eddc8d6fb98167e64ce6c9</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::DistanceRequest</name>
    <filename>structhpp_1_1fcl_1_1DistanceRequest.html</filename>
    <base>hpp::fcl::QueryRequest</base>
    <member kind="function">
      <type></type>
      <name>DistanceRequest</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceRequest.html</anchorfile>
      <anchor>a74efd08836fca87aa4fc43f60be80301</anchor>
      <arglist>(bool enable_nearest_points_=false, FCL_REAL rel_err_=0.0, FCL_REAL abs_err_=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceRequest.html</anchorfile>
      <anchor>a82f674eb521271705d109e54f4dfd7cd</anchor>
      <arglist>(const DistanceResult &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceRequest.html</anchorfile>
      <anchor>a4c2efcb1cc469fab400eb11843e0e488</anchor>
      <arglist>(const DistanceRequest &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_nearest_points</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceRequest.html</anchorfile>
      <anchor>a02515582aa27450292fefba6f95ea1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceRequest.html</anchorfile>
      <anchor>a6604655924b2aa73b6bfa30801688248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceRequest.html</anchorfile>
      <anchor>aeb1fa6ee9ffadfc80b0daeb6917ea02a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::DistanceResult</name>
    <filename>structhpp_1_1fcl_1_1DistanceResult.html</filename>
    <base>hpp::fcl::QueryResult</base>
    <member kind="function">
      <type></type>
      <name>DistanceResult</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a1571b3e2bb196d62a2656e333472afd7</anchor>
      <arglist>(FCL_REAL min_distance_=(std::numeric_limits&lt; FCL_REAL &gt;::max)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a69d8767a4cfa06fcef88433ef16760c2</anchor>
      <arglist>(FCL_REAL distance, const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>abbfc238653a015c3832976e400edeb5a</anchor>
      <arglist>(FCL_REAL distance, const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_, const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;normal_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a7c86f83a625aa9800a9261966b1ee04a</anchor>
      <arglist>(const DistanceResult &amp;other_result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>ae9dadb7c397ce684cc83eaeecae28165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a4343cb4db2be39ea6037f8d1ec4e29bf</anchor>
      <arglist>(const DistanceResult &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>aec001270b9251f01739a35587371fc77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>nearest_points</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>ad9178afb9ba5dd0aae0b3126046ce8f4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a9fa0a9d94af11af6c1c796691273e653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o1</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>aba33eb26c274d814e1185a7a88ea3e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o2</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a10d2d5aa2204fca89f82fdeef92b5564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>ae4f2498e4268faf92f718b4238f79a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>ad2761de0c143dcfd8dd15293fcac263b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONE</name>
      <anchorfile>structhpp_1_1fcl_1_1DistanceResult.html</anchorfile>
      <anchor>a29aa3bfa022b602823bd2179497adbc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::EPA</name>
    <filename>structhpp_1_1fcl_1_1details_1_1EPA.html</filename>
    <class kind="struct">hpp::fcl::details::EPA::SimplexF</class>
    <class kind="struct">hpp::fcl::details::EPA::SimplexHorizon</class>
    <class kind="struct">hpp::fcl::details::EPA::SimplexList</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fadc7b3a302a7f625922682401b6744547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa2d5f994081378b8ba5bc97a3c7ede8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AccuracyReached</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fae56ae92cd3b80c33903cb1576bb72f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degenerated</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa25d7f717a9ce54c177f3ed12dd445374</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NonConvex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa1215b0ed3813d72d868fe30deda55f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidHull</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faea477dc4785adb6286610756d47bd2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfFaces</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf41f44d2dfdfadd62a82adf6bb45c8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfVertices</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf2bb2378a219754a9929b7331715171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FallBack</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2facc45d09a0d780a71fc23e0bba4d3ee38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GJK::SimplexV</type>
      <name>SimplexV</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a3afcd17dcbce2d9715b19d4d40b59540</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fadc7b3a302a7f625922682401b6744547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa2d5f994081378b8ba5bc97a3c7ede8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AccuracyReached</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fae56ae92cd3b80c33903cb1576bb72f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degenerated</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa25d7f717a9ce54c177f3ed12dd445374</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NonConvex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2fa1215b0ed3813d72d868fe30deda55f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidHull</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faea477dc4785adb6286610756d47bd2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfFaces</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf41f44d2dfdfadd62a82adf6bb45c8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfVertices</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2faf2bb2378a219754a9929b7331715171c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FallBack</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa62a89b413865b1e8211d16307cdbc2facc45d09a0d780a71fc23e0bba4d3ee38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EPA</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a7fb5a489bf152c9f0f008725cc6a40ad</anchor>
      <arglist>(unsigned int max_face_num_, unsigned int max_vertex_num_, unsigned int max_iterations_, FCL_REAL tolerance_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EPA</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a99274e9fc77b745211a7b3b968344d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>ab54a49a9c1c6a060d3363700cea41af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>evaluate</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a715134e0b67675597a330fa2bbb15416</anchor>
      <arglist>(GJK &amp;gjk, const Vec3f &amp;guess)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClosestPoints</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>afd16fd5c1b6c51d2abe7f511bae72cfc</anchor>
      <arglist>(const MinkowskiDiff &amp;shape, Vec3f &amp;w0, Vec3f &amp;w1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bind</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>adf01a3644cbcfee92891cebb8383c899</anchor>
      <arglist>(SimplexF *fa, size_t ea, SimplexF *fb, size_t eb)</arglist>
    </member>
    <member kind="variable">
      <type>Status</type>
      <name>status</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a1a2a8e3afc520cecec69bfa18ab13766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJK::Simplex</type>
      <name>result</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>afb3e242be0245f407595ff13122e161f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a54ca0576ba75aaf289a8417533e790fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>ad1de44e76acc040d164518eea4e19b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>sv_store</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>afe85ee366f63017d4b7f5de82da2165c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>fc_store</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>a3f4f0046d2ccddcbc00b132062d4c210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nextsv</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa245442817fd3be44d9c56331d5cb5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexList</type>
      <name>hull</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>adae4ef77e2b67b7fb4b0700b03d5fbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexList</type>
      <name>stock</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA.html</anchorfile>
      <anchor>aa7ff0d3e0c25b2cea5d514d8790c0223</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::GJK</name>
    <filename>structhpp_1_1fcl_1_1details_1_1GJK.html</filename>
    <class kind="struct">hpp::fcl::details::GJK::Simplex</class>
    <class kind="struct">hpp::fcl::details::GJK::SimplexV</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca27d91e1c60615a65d97ad096a74aabea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inside</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73caa8e4aaef15985f9ba848d16e44c55d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca7c7fadc8c714369a0693bdae90ad41f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>vertex_id_t</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>aba1921f1708b8c1d1190142138665939</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca27d91e1c60615a65d97ad096a74aabea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inside</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73caa8e4aaef15985f9ba848d16e44c55d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a5791ce84bd0ff37888b7c1e1b3dda73ca7c7fadc8c714369a0693bdae90ad41f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJK</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a9f1bcff460876bba28f6d314a2e81674</anchor>
      <arglist>(unsigned int max_iterations_, FCL_REAL tolerance_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>adb3509bbe171c676b5bbf705145cb297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>evaluate</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a088d43b7e32eb076ad97abbc25a6ac72</anchor>
      <arglist>(const MinkowskiDiff &amp;shape, const Vec3f &amp;guess, const support_func_guess_t &amp;supportHint=support_func_guess_t::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupport</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a2e8e9997c073a1114855cb1d08d11cf3</anchor>
      <arglist>(const Vec3f &amp;d, bool dIsNormalized, SimplexV &amp;sv, support_func_guess_t &amp;hint) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>encloseOrigin</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>aeb5a3be24d0a2da2eb1f27aad7dfd9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Simplex *</type>
      <name>getSimplex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a166dbf2c03b10d6e3e50cb773fec7601</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasClosestPoints</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>af755a58e42c288ca61d312a7d6a55ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPenetrationInformation</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a352f79d4707fe2e2fd2376c2a3af63d8</anchor>
      <arglist>(const MinkowskiDiff &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClosestPoints</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a91d4856fa30c0575e782655536449245</anchor>
      <arglist>(const MinkowskiDiff &amp;shape, Vec3f &amp;w0, Vec3f &amp;w1)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getGuessFromSimplex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>ac8d6cf6783c270b2cb3a58686fe47994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceEarlyBreak</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a3075dc5fa49b681800a82904091447fa</anchor>
      <arglist>(const FCL_REAL &amp;dup)</arglist>
    </member>
    <member kind="variable">
      <type>MinkowskiDiff const  *</type>
      <name>shape</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a3ec4869cf7fcefe6966875a43cd4e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>ray</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>aa2f5572c36d4bd6c935e8cb507ee6dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>support_func_guess_t</type>
      <name>support_hint</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a3894f018cbca6da0376b8adb426a86e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>a9f7db3d3c530f90e2dc701d3e89bc79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex</type>
      <name>simplices</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK.html</anchorfile>
      <anchor>ab526fc18d46cff5359ded835811ed8e7</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::GJKSolver</name>
    <filename>structhpp_1_1fcl_1_1GJKSolver.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a1bd3e1e0fe2d9be3036a914f184eb113</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance_lower_bound, bool enable_penetration, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a33ef534c27eddaed7d3b5b6b17d736b8</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a2c1f04800f84b97c6bbeda0d4a208d8d</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJKSolver</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>adfc143ed576364b47f6774d59de20c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCachedGuess</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a01b05f976f10fb1931448741f313c5c6</anchor>
      <arglist>(bool if_enable) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCachedGuess</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>ad5b6a17e3f4789324cbc1b8ac1f3cfd4</anchor>
      <arglist>(const Vec3f &amp;guess) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCachedGuess</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a66b34d859e031e0f1bdd8db87b87a062</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aab00dfad3f8c2538af35a369d377b7e8</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a3597779c699123ec3c64953bb4cc5f38</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>shapeTriangleInteraction</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a174557460cabfd6af53866d391ee08fd</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aa96450f8dc302691e2e62fc809382485</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance_lower_bound, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aaa2e21a11d766029dbc46ec4ce4e8058</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance_lower_bound, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aa93388a801758d7f261b93f13abc062c</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a089ae68b80679268675a211fa85f2bee</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a5b7b571ac7472acb210e941d5f5bcd1d</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a78a574a9304f0d25fdc75ef262d795d6</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>add0f31a3a5c21d90987bf5fabf67ba74</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>ac6e9f386c4c459f10f5aa197d1472cca</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a6b28b6eecf5e9ff73720ffe03bb8f983</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *, Vec3f *) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a46fc5af81ffb54001de5d08d14b9ced9</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *, Vec3f *) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a8c32de7dc96723c6167d46dfc209bb6f</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a98ee125fe0e51c71d96a449c16f414dd</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a7971ba72f2c1628db2dc8dbd6eaa3c27</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aba7fd44d08516c41181f98d2e83eb3dc</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a292bb60c2ace49e170f95c9b10bbd58e</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aeaaba6f70b9ff18d9cd84421fe9a4796</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, bool, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a6736026d6536ed0e64687e35e88bd632</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a445b60f62a18419865e460197ed0303b</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aaec74254162537a0cada602e2c626c97</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>af4fe019652ef136b3abaa920650dddb2</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a294f4ce2aa940e8b94e8a542cd353939</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>ad385fe3314113cc926790c8e69cfd0db</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>ae5341b3e6ab949ebc6b923f496a49578</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aa8009797074983db19ddcc142e635c41</anchor>
      <arglist>(const Capsule &amp;, const Transform3f &amp;, const Capsule &amp;, const Transform3f &amp;, FCL_REAL &amp;, Vec3f &amp;, Vec3f &amp;, Vec3f &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a13d2ca4df4fd605d03d93bb064338eec</anchor>
      <arglist>(const TriangleP &amp;s1, const Transform3f &amp;tf1, const TriangleP &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a8a7308626292f1b648f86efa9bb6fc9f</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance_lower_bound, bool enable_penetration, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_face_num</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a06a52ef1827c3f0872a1be6cc2ac0a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_vertex_num</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a1ef900fe482b65c4191e33e2d6721de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_iterations</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a40eacc1ca3c9efe5db0e4fefbafbbfe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>epa_tolerance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aca5564c0b233fa05c48648bf60c72588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>gjk_tolerance</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a727382643c0cd97cb75866828ed408ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>gjk_max_iterations</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a18bea9dc750ec777550480ed77447bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cached_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>aac0f5790c3a5724c430fce441ed43e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a916cd3cd78e7c46d484a18b6f996e9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>support_func_guess_t</type>
      <name>support_func_cached_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>af725d4163974ad638cb0ed47fdb6faa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>shapeIntersect</name>
      <anchorfile>structhpp_1_1fcl_1_1GJKSolver.html</anchorfile>
      <anchor>a8a7308626292f1b648f86efa9bb6fc9f</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance_lower_bound, bool enable_penetration, Vec3f *contact_points, Vec3f *normal) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Halfspace</name>
    <filename>classhpp_1_1fcl_1_1Halfspace.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga3323c48cb15d98f832c553fd28263946</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga1ac2e3dd24a4d7a681738ea9b565940b</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga22dfa44f758dd9e109ea1449ddc285e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga7b86f46070764b2d1edce92e5edd1639</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga269c25fb5e95b4b67a7023a44dfb1a65</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4aa476a1ef4200a730463c0666374202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga6af381ce357e4ab54f35fc25e533b4a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga744d4f1e8dd1a812370eb098d6dbb292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gafc8222ad029bb97beab8f5b7553daadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2902ef935ab7289ceccbca3f32262c1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::KDOP</name>
    <filename>classhpp_1_1fcl_1_1KDOP.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga85657a36dee75d211dcbfa3eb9e7a105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga02d789ec14798ee290cb92a8b299ae83</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaeeaf5ff05f20cc5f337dda5434ccded3</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaadb702ec84120a7d825ea288ad18a6c6</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gacaeb1bb87c019077308425d3401fdf99</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga023bf7d35bf241c7c911228740a5d6b3</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7d1ed4e3d3d7445dbb044aa3771bd44e</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga2c57d2f3c330d4f574cdbaf503e32e9d</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga15e5a8827bbe5c40312bba7322e938b2</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0588599e44ec179fb3f74d923718340f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf75d30c0d08cea3b03acecec905e5e03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaeb078d587d08ae72f6971a9c69471bb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa6a164f329fa5c1ad520cb333164ce53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga80c87341269f185ba01f58f36a9d815e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7821f5cfdc009bcb67ffb9be583b5aea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dist</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf234ee14a61453611479d3f25c0a67fa</anchor>
      <arglist>(short i) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>dist</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga60789043c0677a8a541bc4db1d0862e2</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gade27acaeec3f174b0ca8af3fdea175ce</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::CachedMeshLoader::Key</name>
    <filename>structhpp_1_1fcl_1_1CachedMeshLoader_1_1Key.html</filename>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>structhpp_1_1fcl_1_1CachedMeshLoader_1_1Key.html</anchorfile>
      <anchor>a815aad775281c58ade890a611ac2492c</anchor>
      <arglist>(const std::string &amp;f, const Vec3f &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structhpp_1_1fcl_1_1CachedMeshLoader_1_1Key.html</anchorfile>
      <anchor>a85a7bd9128fbf0423649c701f864b28c</anchor>
      <arglist>(const CachedMeshLoader::Key &amp;b) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>structhpp_1_1fcl_1_1CachedMeshLoader_1_1Key.html</anchorfile>
      <anchor>a8ea54b053225a467daff07d7e7d3c972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>scale</name>
      <anchorfile>structhpp_1_1fcl_1_1CachedMeshLoader_1_1Key.html</anchorfile>
      <anchor>a586cea937c17d24815e7c139dc70431b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::kIOS</name>
    <filename>classhpp_1_1fcl_1_1kIOS.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa9f463dd27835f8582b623ab50d6b274</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga62b5fae2e9d1020e9c03a96e7af1ba7f</anchor>
      <arglist>(const kIOS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga8fed89a9c67241d95b144908eda6af27</anchor>
      <arglist>(const kIOS &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab086b1a822f7d63cad56dab32f114eed</anchor>
      <arglist>(const kIOS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7d0fc0debf3ff909120f48d98debe17c</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga33142f705508c96867c8ec9728c70ce2</anchor>
      <arglist>(const kIOS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafe4398821a2345585b5609b7066168cc</anchor>
      <arglist>(const kIOS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaab8a38960023c3954b323de036a55486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga34c93ad277fbde55194cae2aa6ce4798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga8c80f53926ed83bfa16540f353649640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga945f64cd49ebb0d4dfc8cf5241faffc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga147787bd1b08e7a38c20f8987539d2d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa85d1e1b8b68341b201e204aee79f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>kIOS_Sphere</type>
      <name>spheres</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga2959f92c45b91119c0a943d8e212f146</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>num_spheres</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac1facc5493466760dc766461acb22bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac393672dd1afa4d7447e9e3768e38013</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::LargeConvex</name>
    <filename>structhpp_1_1fcl_1_1details_1_1LargeConvex.html</filename>
    <base>hpp::fcl::ShapeBase</base>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::internal::Loader</name>
    <filename>structhpp_1_1fcl_1_1internal_1_1Loader.html</filename>
    <member kind="function">
      <type></type>
      <name>Loader</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1Loader.html</anchorfile>
      <anchor>a5efb6af4b27fb162b4c744820ca51962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Loader</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1Loader.html</anchorfile>
      <anchor>ad729679c2fbf7db78cb2dea63057ad31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1Loader.html</anchorfile>
      <anchor>afaebbac58b2beae4fa844a7acade6472</anchor>
      <arglist>(const std::string &amp;resource_path)</arglist>
    </member>
    <member kind="variable">
      <type>Assimp::Importer *</type>
      <name>importer</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1Loader.html</anchorfile>
      <anchor>a03b15a87115312c4c5b65096b03b33e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>aiScene const  *</type>
      <name>scene</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1Loader.html</anchorfile>
      <anchor>a393b8db2466e954a644574944d1eaaf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::MeshLoader</name>
    <filename>classhpp_1_1fcl_1_1MeshLoader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshLoader</name>
      <anchorfile>classhpp_1_1fcl_1_1MeshLoader.html</anchorfile>
      <anchor>a47d600d417ce020d8176224e754da230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BVHModelPtr_t</type>
      <name>load</name>
      <anchorfile>classhpp_1_1fcl_1_1MeshLoader.html</anchorfile>
      <anchor>aa96215dfb80fdb29e1d0814d380d6b9c</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale=Vec3f::Ones())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollisionGeometryPtr_t</type>
      <name>loadOctree</name>
      <anchorfile>classhpp_1_1fcl_1_1MeshLoader.html</anchorfile>
      <anchor>a4431f4adcbbdfca8c94fc7e613262471</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshLoader</name>
      <anchorfile>classhpp_1_1fcl_1_1MeshLoader.html</anchorfile>
      <anchor>ae1ad2b1692206519a1627e190727b71f</anchor>
      <arglist>(const NODE_TYPE &amp;bvType=BV_OBBRSS)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNodekIOS</name>
    <filename>classMeshShapeDistanceTraversalNodekIOS.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodekIOS</name>
      <anchorfile>classMeshShapeDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a876566ba7cb62ed0545580da8b5fb219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>classMeshShapeDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a8cfbacfffaf8f036ab7017f917731873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>classMeshShapeDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>ac954242e4c0ecac87ff5b10e2f9c4d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVDistanceLowerBound</name>
      <anchorfile>classMeshShapeDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a9a16436e854b10ef119019e590c90018</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classMeshShapeDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a04d7ddf12e231f037df8466f8cf00ffe</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNodeOBBRSS</name>
    <filename>classMeshShapeDistanceTraversalNodeOBBRSS.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodeOBBRSS</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>a2e4cf22598dcad27250266e89c5e709d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>ae6fe686678768645a68baabcec9c5aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>a14e5c25e5a65fe0f8c348921eb8b52e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVDistanceLowerBound</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>ac89a41ffb5ab07aa0294c1d09148adba</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>ad4e8cbe9700c3fe222c9c9838b4756c9</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNodeRSS</name>
    <filename>classMeshShapeDistanceTraversalNodeRSS.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodeRSS</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>a4a5cf632f9dc4ec4baf182c7d7bcc130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>aa10292ba6c572d7afac3a1829e6dff94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>a40653e6238f030dba6d88ad626c3afc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVDistanceLowerBound</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>a824a5935cef6816d644c72a98bc12b7a</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classMeshShapeDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>a9663bcf2738650bee451dc6f5daaaf90</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::MinkowskiDiff</name>
    <filename>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</filename>
    <class kind="struct">hpp::fcl::details::MinkowskiDiff::ShapeData</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>GetSupportFunction</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>ad5421ff721310902a6f2689dd740f7bd</anchor>
      <arglist>)(const MinkowskiDiff &amp;minkowskiDiff, const Vec3f &amp;dir, bool dirIsNormalized, Vec3f &amp;support0, Vec3f &amp;support1, support_func_guess_t &amp;hint, ShapeData data[2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinkowskiDiff</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>ae03ab48058ec4e328acbb345814e6b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>aaa2335b46fd63bbc974cff1bf8641313</anchor>
      <arglist>(const ShapeBase *shape0, const ShapeBase *shape1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a8a4da5c157d927d9e6e44cf3b7b066fc</anchor>
      <arglist>(const ShapeBase *shape0, const ShapeBase *shape1, const Transform3f &amp;tf0, const Transform3f &amp;tf1)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support0</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a0ff74277104cf2fdded419d01bd4d2b1</anchor>
      <arglist>(const Vec3f &amp;d, bool dIsNormalized, int &amp;hint) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support1</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a0d4605550b305b211fcc634495f28915</anchor>
      <arglist>(const Vec3f &amp;d, bool dIsNormalized, int &amp;hint) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>support</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a17f981e903c2a859fbd56b1afc7eaab7</anchor>
      <arglist>(const Vec3f &amp;d, bool dIsNormalized, Vec3f &amp;supp0, Vec3f &amp;supp1, support_func_guess_t &amp;hint) const</arglist>
    </member>
    <member kind="variable">
      <type>const ShapeBase *</type>
      <name>shapes</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>aecf1514ff32ac049b36aa24c432b2ae6</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>ShapeData</type>
      <name>data</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>ab591833b4a575f307b7c55af74a8a3d3</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>oR1</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a765f60edfc717cc7230935821d0c6d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>ot1</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a142fe081cd8b16340a2efdd7bb060f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Array&lt; FCL_REAL, 1, 2 &gt;</type>
      <name>inflation</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>ac7c45285a4a885fb68833d0f5b2cd8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>linear_log_convex_threshold</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a98d27572ea9353877db5e1d62ca6a388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GetSupportFunction</type>
      <name>getSupportFunc</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff.html</anchorfile>
      <anchor>a96be7a6954a6db985ad9ab4f6b6b6c29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::ConvexBase::Neighbors</name>
    <filename>structhpp_1_1fcl_1_1ConvexBase_1_1Neighbors.html</filename>
    <member kind="function">
      <type>unsigned char const  &amp;</type>
      <name>count</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5fa0da1aabf21fe6d77b6241bbe5cf7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>operator[]</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaec4c1cfc9e0458eece65fbe95b3a5104</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int const  &amp;</type>
      <name>operator[]</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga1e1ec0f66450c045ebac84efc0cd7c40</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>count_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaffd3a060b6387bcc3bd204206568c9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int *</type>
      <name>n_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga79d0073bafd61942e97be258c7d94718</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OBB</name>
    <filename>classhpp_1_1fcl_1_1OBB.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad375decb325b9fde83e08e7c79d33bbc</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga83cbcc96e91f6a34e338384486b06f58</anchor>
      <arglist>(const OBB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaebc9f97f3e8ee988ac73b6de383a3b86</anchor>
      <arglist>(const OBB &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga1a2b3e842e709c32518efe7b3fc7c177</anchor>
      <arglist>(const OBB &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga4c28c39c9d1bd5b8d649dda551d903b0</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga559437d3b977205c6f031b24fe23a831</anchor>
      <arglist>(const OBB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae795820ce951ddbbd6267f381cdaf602</anchor>
      <arglist>(const OBB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaee2fdae136346c38fb1c7bb52a99976f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad7af4c911220b9e7ddd0c7d3e687ef7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gacd370ab65d81d252518a73801114026f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga13e1f97642a775ebf32bf8638b5f89c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9c4823ac5df91b5244f55c83186cbc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gabf09b10cb5e9d79ecf665ea4212efe29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>axes</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7fa65600df31c0b767aa573f2b1ece26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>To</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf022b399bacc51893532a7946f55300e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>extent</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a2cd0b2320a199b97e467f5b9be9dcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::internal::obbDisjoint_check_Ai_cross_Bi</name>
    <filename>structhpp_1_1fcl_1_1internal_1_1obbDisjoint__check__Ai__cross__Bi.html</filename>
    <templarg>ib</templarg>
    <templarg>jb</templarg>
    <templarg>kb</templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>run</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1obbDisjoint__check__Ai__cross__Bi.html</anchorfile>
      <anchor>a7a5ed4d1269033082a387ab24f3b2c24</anchor>
      <arglist>(int ia, int ja, int ka, const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const Matrix3f &amp;Bf, const FCL_REAL &amp;breakDistance2, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OBBRSS</name>
    <filename>classhpp_1_1fcl_1_1OBBRSS.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga66ccf0ba232899a9ae4f2286d8a7a104</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga2cd58c56e944b84506a7fca29d1298d4</anchor>
      <arglist>(const OBBRSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a1ba43a3a928adf351ec7a7d3ef1feb</anchor>
      <arglist>(const OBBRSS &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga22d06adf26c355991aaac824ca5dfb29</anchor>
      <arglist>(const OBBRSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gace676fcc244ae295b46f2194ad342c6f</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab2494414e636eeb3ee91ff452fbbeac3</anchor>
      <arglist>(const OBBRSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7d50a3fd64dc39007b4e30a967de6513</anchor>
      <arglist>(const OBBRSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad3f799d18b378bedcba1533540c1a51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0c6c30eb52d8b9cefd092ddc33700596</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga93fbcbd76e8aee4fb0615c89a1f8df48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad32072cdf1c74b57ea1e65f1251a1bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga30ed937750555ddfd5f0fe22b10c3fbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga97bce2f87ae4ec37d6dc9fe6e1d57835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga32d77538dc0d7ece2ce387a1f86bc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>rss</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab2b45bed8104f9c5db2ce7e7171e49db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::OcTree</name>
    <filename>classhpp_1_1fcl_1_1OcTree.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="typedef">
      <type>octomap::OcTreeNode</type>
      <name>OcTreeNode</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a577cfa02f5eec6d9d2c7a1e374b67b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcTree</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a22232a3580b97134f0ac5dca23077f1d</anchor>
      <arglist>(FCL_REAL resolution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcTree</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a11fe633a5b34cdadac289b2b29e97dab</anchor>
      <arglist>(const boost::shared_ptr&lt; const octomap::OcTree &gt; &amp;tree_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>ac9ec7cc43f70ad89cd2a9bb347023e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>getRootBV</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a0ffabb62cd92b125a704675db022595f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OcTreeNode *</type>
      <name>getRoot</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a65ebb74a3757774ff9bd300fa46c1dfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeOccupied</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a35748fbc055858898f09e100a8a46450</anchor>
      <arglist>(const OcTreeNode *node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeFree</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>ae0681b9d98d21420b8c646c0765929e2</anchor>
      <arglist>(const OcTreeNode *node) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeUncertain</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>aa10713602aff35ed993982e373c8fd55</anchor>
      <arglist>(const OcTreeNode *node) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::array&lt; FCL_REAL, 6 &gt; &gt;</type>
      <name>toBoxes</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a75e5dce8c57c1e7e09e1ed1fc3412658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getOccupancyThres</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>ab3d7b087c794aaa848072f33482d1b68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getFreeThres</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a36f76791d4362cdcbbe4b529b4688839</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getDefaultOccupancy</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a417eaa7bd6878fe5c20cc3934756bd42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellDefaultOccupancy</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a5cbc293ffa544945754bc66c1a153e25</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOccupancyThres</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>aaf30555708384fd9c1985f83edae1694</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeThres</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a95f4070517354c83280d0c0491e96b00</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>OcTreeNode *</type>
      <name>getNodeChild</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a5d326d22627d52bed7e840b0593153eb</anchor>
      <arglist>(OcTreeNode *node, unsigned int childIdx)</arglist>
    </member>
    <member kind="function">
      <type>const OcTreeNode *</type>
      <name>getNodeChild</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>ac814e72109a570c8fefdf6c4a852a507</anchor>
      <arglist>(const OcTreeNode *node, unsigned int childIdx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nodeChildExists</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>ab34d7eaa4ee5303dd9c45dacd5c84777</anchor>
      <arglist>(const OcTreeNode *node, unsigned int childIdx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nodeHasChildren</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>ada0dc0a461e01ca6e58bf794cb454ba7</anchor>
      <arglist>(const OcTreeNode *node) const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>a2e594716fede4696fb7a2ec2a6372aeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>classhpp_1_1fcl_1_1OcTree.html</anchorfile>
      <anchor>adfb333fc1c0227c823d7c4e8b1ea9104</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Plane</name>
    <filename>classhpp_1_1fcl_1_1Plane.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga071d293316a977dcfdf55e536585dfb2</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8fa292012cf3124a7f28d9643eec9126</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga74e9276bfffa9ccd05fc9285f005ffa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8c2fc6fbaf02f424da8e2d23ab1a2a96</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga853eb7b8aa8eb942a2fe812de6dd23ae</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga3a65c0da4d0c229e3288cbbeeae9f753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga17355376ea1fde853f20ee73b9f531a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4a7540f85275f6bc834cff51e9b27fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga880b3c74f73b5487b7fadbef3dba2730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4bcdeee3ba6fd7047081f399ea6dbff7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::tools::Profiler</name>
    <filename>classhpp_1_1fcl_1_1tools_1_1Profiler.html</filename>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedBlock</class>
    <class kind="class">hpp::fcl::tools::Profiler::ScopedStart</class>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab80f7466478c84d03cd5f0e6cb76d2c2</anchor>
      <arglist>(bool printOnDestroy=false, bool autoStart=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profiler</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a02cfda8b7dde7135a55596d5a2f45262</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a240c10988ef5407ffd57dcf93b1c2929</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a3c38dda979b8794ef1acec6ad775a603</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a6e1bb240ad30ae37add14e3d3dd752a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a599e5f7e40c52fe7ad6ecf9d9edc4d21</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a1728360d6ec6eb041fb78843a73bbb7e</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a8141a43867f6f2c8aa66946aadd410e8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a2de91bf99c0d37f7addce570985232f3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a0fbc4c0568fb4510defa199524391f13</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a2759a371284c6b59c63e964ed34008d1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Profiler &amp;</type>
      <name>Instance</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a46cadd67e50901ddfcc965ddee1a9fd2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Start</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab4f927795847322ee3259af2b905fcef</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Stop</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a67c78326b7024ba126a1fdd3836faed1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clear</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a5feac282db74ee7ae4b68c618963b41a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Event</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>afe4d6fe18c2cc89ab3d09660a0c8716a</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Average</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>abdc9dd43a906936b34c262c24ba69d08</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Begin</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab5a80f15afd8c5d2c0bcd949baad5c3d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>End</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a81b3a58fd39bed581e6aa40f9dfef5e4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Status</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>abb113a9ac7a81eeb0da097b5dca90028</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Running</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ad79e2f29c6cae207a215af70e9c07b35</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::QueryRequest</name>
    <filename>structhpp_1_1fcl_1_1QueryRequest.html</filename>
    <member kind="function">
      <type></type>
      <name>QueryRequest</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryRequest.html</anchorfile>
      <anchor>a987abec3eadcec9b979a50589aa22509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateGuess</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryRequest.html</anchorfile>
      <anchor>ab5111d5e611e2d6fc1898071d21dde29</anchor>
      <arglist>(const QueryResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryRequest.html</anchorfile>
      <anchor>a11c4c3eecef94c6503decffbd1dbf71b</anchor>
      <arglist>(const QueryRequest &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cached_gjk_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryRequest.html</anchorfile>
      <anchor>ae32f60644634e0c9a380bac2515e4e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_gjk_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryRequest.html</anchorfile>
      <anchor>a0971c6a82c3c7f08f1f882e45f512c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>support_func_guess_t</type>
      <name>cached_support_func_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryRequest.html</anchorfile>
      <anchor>a81aa12b76e899fc11e038a79a0fa1394</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::QueryResult</name>
    <filename>structhpp_1_1fcl_1_1QueryResult.html</filename>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_gjk_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryResult.html</anchorfile>
      <anchor>a197e7b68a6dba7903881d849c9bfbab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>support_func_guess_t</type>
      <name>cached_support_func_guess</name>
      <anchorfile>structhpp_1_1fcl_1_1QueryResult.html</anchorfile>
      <anchor>a164c96794d80706448612f0437bd07f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::RSS</name>
    <filename>classhpp_1_1fcl_1_1RSS.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedab894f02ba70312a46f8faff9ad065</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaae5e40853180438e61b7d53c11d66688</anchor>
      <arglist>(const RSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5f62941cc61b0b0f9489f9fea7bf116d</anchor>
      <arglist>(const RSS &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga32e67558e6699023fffab4ff695d9a75</anchor>
      <arglist>(const RSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0cfbdf8c9d6fb2a1432fc7d5038ba8ce</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac934e99ef62e67afdbea8b06f97bda99</anchor>
      <arglist>(const RSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5bb3a7beb0c2d26c5d7515781a8b0c7e</anchor>
      <arglist>(const RSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga3bcd007fc19a38439fdd8583aa7c7dcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad1b8b794c0abd20a7b8863288aeb62ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga91998366f8c77dccea9c2f2054c7a7bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf9189a9c2dfd17b5d384ebdbcf23fa1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga349fcbd3d96e1e5d8e6c368f13785e49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga36aed96de33e8a14e7945b129d79ae26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga113e987b7d23870888b9947647a6f530</anchor>
      <arglist>(const RSS &amp;other, RSS &amp;) const</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>axes</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac666fdacdfe7841033ffec0a32bebebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>Tr</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga35617e0c73eebcf3058f9a8816e5c940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>length</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa9d3d588b267e04ab4fe4f5da29f434f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga84d6a7fb6599d623364e3836a92fb956</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::tools::Profiler::ScopedBlock</name>
    <filename>classhpp_1_1fcl_1_1tools_1_1Profiler_1_1ScopedBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedBlock</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a274003b2b26fb5217431e885f4c13008</anchor>
      <arglist>(const std::string &amp;name, Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedBlock</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a06ecde4a661f7aefc2ebe32aea826d90</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::tools::Profiler::ScopedStart</name>
    <filename>classhpp_1_1fcl_1_1tools_1_1Profiler_1_1ScopedStart.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedStart</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>a0a872a5774b145a4b51cee1c2ab805ff</anchor>
      <arglist>(Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedStart</name>
      <anchorfile>classhpp_1_1fcl_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>af73047fea20369427b2da4c7d9d16c53</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits.html</filename>
    <templarg></templarg>
    <base>hpp::fcl::details::shape_traits_base</base>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; Box &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Box_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Box_01_4.html</anchorfile>
      <anchor>a2d2330d91be7c8963eaafdeec15543d5a34365a6a908451e78ef5010161b4de85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Box_01_4.html</anchorfile>
      <anchor>a2d2330d91be7c8963eaafdeec15543d5a34365a6a908451e78ef5010161b4de85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; Capsule &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Capsule_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Capsule_01_4.html</anchorfile>
      <anchor>a90afb3588317a740637874a893db4ddfa24f4b5f5a89634c9d0a6ba0141961474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Capsule_01_4.html</anchorfile>
      <anchor>a90afb3588317a740637874a893db4ddfa24f4b5f5a89634c9d0a6ba0141961474</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; Cone &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Cone_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Cone_01_4.html</anchorfile>
      <anchor>a4bb55a93d3e4d1ab29c2efdae1a7a270aae48d14762532cb6dab39b825ddd5b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Cone_01_4.html</anchorfile>
      <anchor>a4bb55a93d3e4d1ab29c2efdae1a7a270aae48d14762532cb6dab39b825ddd5b92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; ConvexBase &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01ConvexBase_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01ConvexBase_01_4.html</anchorfile>
      <anchor>acfefe05bc775f6b65fc7e2172faa3b54a92de933c91c88a7b58404a7d17b0232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01ConvexBase_01_4.html</anchorfile>
      <anchor>acfefe05bc775f6b65fc7e2172faa3b54a92de933c91c88a7b58404a7d17b0232f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; Cylinder &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Cylinder_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Cylinder_01_4.html</anchorfile>
      <anchor>a3c453d0da17f1c51760aeec2b7a68562a780043512cca2e5d3319728a81f04fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Cylinder_01_4.html</anchorfile>
      <anchor>a3c453d0da17f1c51760aeec2b7a68562a780043512cca2e5d3319728a81f04fcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; Sphere &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Sphere_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Sphere_01_4.html</anchorfile>
      <anchor>ab06b787b5592988d146aab9735969a9da51afabcc1d987b48d309e90bd9abf2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01Sphere_01_4.html</anchorfile>
      <anchor>ab06b787b5592988d146aab9735969a9da51afabcc1d987b48d309e90bd9abf2f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits&lt; TriangleP &gt;</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01TriangleP_01_4.html</filename>
    <base>hpp::fcl::details::shape_traits_base</base>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01TriangleP_01_4.html</anchorfile>
      <anchor>ade3e704ee6538775752d0f68363a24d0acb1ea7100aea99a218216b11c3357001</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits_3_01TriangleP_01_4.html</anchorfile>
      <anchor>ade3e704ee6538775752d0f68363a24d0acb1ea7100aea99a218216b11c3357001</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::shape_traits_base</name>
    <filename>structhpp_1_1fcl_1_1details_1_1shape__traits__base.html</filename>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits__base.html</anchorfile>
      <anchor>ae6d7397e460e3239033f51c79df8b09ea3a59a9c7d311e6fafd481ddabe926534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NeedNormalizedDir</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1shape__traits__base.html</anchorfile>
      <anchor>ae6d7397e460e3239033f51c79df8b09ea3a59a9c7d311e6fafd481ddabe926534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::ShapeBase</name>
    <filename>classhpp_1_1fcl_1_1ShapeBase.html</filename>
    <base>hpp::fcl::CollisionGeometry</base>
    <member kind="function">
      <type></type>
      <name>ShapeBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga0ac2d822a6533c0f079d78eff4a7e597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapeBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5e4546cd74ffa64c06d1c6d9757f50db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gadb718b0de8fea92541e31b5406e04372</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::MinkowskiDiff::ShapeData</name>
    <filename>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff_1_1ShapeData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; int8_t &gt;</type>
      <name>visited</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1MinkowskiDiff_1_1ShapeData.html</anchorfile>
      <anchor>aa8059764836cdbb2ab53d8c22e946549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode</name>
    <filename>classShapeMeshDistanceTraversalNode.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a2c31c7bccdb07cf92e168d2fefae4553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a454b5358a2bb64a953f0aabaa93569d6</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a65e4f1b456246dd6f20ef5bbecc39d6f</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>ab2f276bfde591efed2e25aaddbd90161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a33619b834f32db44510b27b662836227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a129976af6b46345a90d8e73bf61aaaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a78200ab14aac2cf1c64dc4f473ab9043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GJKSolver *</type>
      <name>nsolver</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>af337f311c31dbb88c827a069c4601580</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, kIOS &gt;</name>
    <filename>classShapeMeshDistanceTraversalNode.html</filename>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a2c31c7bccdb07cf92e168d2fefae4553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a454b5358a2bb64a953f0aabaa93569d6</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a65e4f1b456246dd6f20ef5bbecc39d6f</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>ab2f276bfde591efed2e25aaddbd90161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a33619b834f32db44510b27b662836227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a129976af6b46345a90d8e73bf61aaaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a78200ab14aac2cf1c64dc4f473ab9043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GJKSolver *</type>
      <name>nsolver</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>af337f311c31dbb88c827a069c4601580</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS &gt;</name>
    <filename>classShapeMeshDistanceTraversalNode.html</filename>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a2c31c7bccdb07cf92e168d2fefae4553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a454b5358a2bb64a953f0aabaa93569d6</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a65e4f1b456246dd6f20ef5bbecc39d6f</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>ab2f276bfde591efed2e25aaddbd90161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a33619b834f32db44510b27b662836227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a129976af6b46345a90d8e73bf61aaaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a78200ab14aac2cf1c64dc4f473ab9043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GJKSolver *</type>
      <name>nsolver</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>af337f311c31dbb88c827a069c4601580</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, RSS &gt;</name>
    <filename>classShapeMeshDistanceTraversalNode.html</filename>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a2c31c7bccdb07cf92e168d2fefae4553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a454b5358a2bb64a953f0aabaa93569d6</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a65e4f1b456246dd6f20ef5bbecc39d6f</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>ab2f276bfde591efed2e25aaddbd90161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a33619b834f32db44510b27b662836227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a129976af6b46345a90d8e73bf61aaaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>a78200ab14aac2cf1c64dc4f473ab9043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GJKSolver *</type>
      <name>nsolver</name>
      <anchorfile>classShapeMeshDistanceTraversalNode.html</anchorfile>
      <anchor>af337f311c31dbb88c827a069c4601580</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNodekIOS</name>
    <filename>classShapeMeshDistanceTraversalNodekIOS.html</filename>
    <templarg></templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodekIOS</name>
      <anchorfile>classShapeMeshDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a867e8a24decbcc3114b5a80a1857df11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>classShapeMeshDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>ab3dcad7f4c058fdd7d5814c9f0346058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>classShapeMeshDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a49ea505f89511243a364e3baa26470a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVDistanceLowerBound</name>
      <anchorfile>classShapeMeshDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>a7ecf75a73246d7adfbb58369e15fdf09</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNodekIOS.html</anchorfile>
      <anchor>ab92f1a9cf9ef5306eb4e2631703247bd</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNodeOBBRSS</name>
    <filename>classShapeMeshDistanceTraversalNodeOBBRSS.html</filename>
    <templarg></templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodeOBBRSS</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>a0d20843aed0c73a8b107df8299bd621a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>aedd08fb0e76238ccff64713e9ffd60b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>aa4f1b49cfc37cc7cfff6b18fdb55e884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVDistanceLowerBound</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>a49d66a58e77c1364e2460121a3a6069b</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeOBBRSS.html</anchorfile>
      <anchor>a068d1c906b0284b1d031ba683c3c0a93</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNodeRSS</name>
    <filename>classShapeMeshDistanceTraversalNodeRSS.html</filename>
    <templarg></templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodeRSS</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>a4e741e906b0f1448340f1f327163331d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>aff9eab9bd95dcfd128e8828ab7ff914f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>a8813fa7d5ee6d318b2a603f65544f216</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVDistanceLowerBound</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>ab8407a477b7fa15e6ebb7b3108fb2fde</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafComputeDistance</name>
      <anchorfile>classShapeMeshDistanceTraversalNodeRSS.html</anchorfile>
      <anchor>ac054d15e3e4d1ae5accb4f831e5abfb2</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::GJK::Simplex</name>
    <filename>structhpp_1_1fcl_1_1details_1_1GJK_1_1Simplex.html</filename>
    <member kind="function">
      <type></type>
      <name>Simplex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK_1_1Simplex.html</anchorfile>
      <anchor>ad0d48c2bf9a89dfdf89277a3b7ed0b91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>vertex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK_1_1Simplex.html</anchorfile>
      <anchor>a168d07ffca58f1cfa0407718f689aa20</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>vertex_id_t</type>
      <name>rank</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK_1_1Simplex.html</anchorfile>
      <anchor>a78ebbd6477cf4f2d03390f1b39c4cc23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::EPA::SimplexF</name>
    <filename>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexF</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>a3b7d2c284dd3a201e23684efae9860cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>a1257cfd8294b341581af0260b97bc57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>a0b90cd6270445637665d5674c90df730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>vertex</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>ab0ba3a5bdb9304ec62343ae7477eb38e</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>f</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>a26b26f838d748e805f89b2a53c4b2f64</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>l</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>ad7c5a59fe087f51793f4b2750153b2b4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>e</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>acefdcf69860b5ce6138b000c3a8898c6</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>pass</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexF.html</anchorfile>
      <anchor>a2a1f270ad3cf845595c9f7d8c9b339fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::EPA::SimplexHorizon</name>
    <filename>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexHorizon.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexHorizon</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexHorizon.html</anchorfile>
      <anchor>adb0c801bb33d63d4a044af6ea9128301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>cf</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexHorizon.html</anchorfile>
      <anchor>a18acd95322c7797f3bafdabf79256580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>ff</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexHorizon.html</anchorfile>
      <anchor>a8e31320b84c04cbd4d046e1647528e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nf</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexHorizon.html</anchorfile>
      <anchor>ab0c4e7b0be949548a7575d9c772594af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::EPA::SimplexList</name>
    <filename>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexList.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexList</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexList.html</anchorfile>
      <anchor>a418cbf26a625ddd35c5e5c72c771f228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexList.html</anchorfile>
      <anchor>ae2847d9ef2c82e2505d9d61609f7eff6</anchor>
      <arglist>(SimplexF *face)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexList.html</anchorfile>
      <anchor>ad2bb192e5a4e3cd891e1e57a7a0e2149</anchor>
      <arglist>(SimplexF *face)</arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>root</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexList.html</anchorfile>
      <anchor>ad4c9add0fb272687d190a286770c2d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1EPA_1_1SimplexList.html</anchorfile>
      <anchor>a7d72aa892a62563567076a5a36075bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::GJK::SimplexV</name>
    <filename>structhpp_1_1fcl_1_1details_1_1GJK_1_1SimplexV.html</filename>
    <member kind="variable">
      <type>Vec3f</type>
      <name>w0</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK_1_1SimplexV.html</anchorfile>
      <anchor>a52d2b661c8b38937e9af637c089c5171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>w1</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK_1_1SimplexV.html</anchorfile>
      <anchor>a1c6d9829b8cf472e46a54df51d8ae91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>w</name>
      <anchorfile>structhpp_1_1fcl_1_1details_1_1GJK_1_1SimplexV.html</anchorfile>
      <anchor>aeb5af26265354b636335a3475807bd10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::details::SmallConvex</name>
    <filename>structhpp_1_1fcl_1_1details_1_1SmallConvex.html</filename>
    <base>hpp::fcl::ShapeBase</base>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Sphere</name>
    <filename>classhpp_1_1fcl_1_1Sphere.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga983f044a63965f415d14ad13d1ca1054</anchor>
      <arglist>(FCL_REAL radius_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaf406037d946c598a77f46b2b1d24f948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaeeaba60fa99bd747b6a4fb8bd0f65ce1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gae59ff5cefd4106ac5ffda6f9fa519383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaa2aad186f810846658eced3690e331ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga896679c40f9188fdc70e0bab3f2a42d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Transform3f</name>
    <filename>classhpp_1_1fcl_1_1Transform3f.html</filename>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>aa17a6cbd7fd0c1eee4922b92af4900cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a853ce11e91b58a1a8775513b6617caf2</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Matrixx3Like &gt; &amp;R_, const Eigen::MatrixBase&lt; Vector3Like &gt; &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a4f03d35d8c1ce4c261f8489c4c73efad</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Eigen::MatrixBase&lt; Vector3Like &gt; &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ae8875747b9df6f0beca9f5b410f075f0</anchor>
      <arglist>(const Matrix3f &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ab8e0b4e7dd4d5d04acd1d10c461e81be</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a08e86bf157be061fad44f361440163fc</anchor>
      <arglist>(const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>operator=</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>acc06f35a779da2b82f8e1c6fe10ea485</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a3b7951bf016654937d2637fde96720b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a6e63dc97a68e53f2a3c7d8c6ce9cd81b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>getQuatRotation</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a9abf7c4317c1252bbadbe06c4e66a343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a3a5fcaf5df719bf5f105fb87d89ecc52</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Matrix3Like &gt; &amp;R_, const Eigen::MatrixBase&lt; Vector3Like &gt; &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>aeffb3a214f98129904faef347767ffdf</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ad3ad4b332d90d67f12f9115cd14ee186</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>aac0e59a2d14256251521afa01383e8f9</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuatRotation</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>aef90e060827024567971614d9c93dc14</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>transform</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ab2309225c2d4b3c5fe9fed06858243c0</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>inverseInPlace</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ad63e25a628faafd5365e90770370f95f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverse</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ae5894fff310c4fa9dd4f1d060f77cd4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverseTimes</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a76cc29b4ca1554070d253fc59574bee2</anchor>
      <arglist>(const Transform3f &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a30e558b7da699146fe002560475580ef</anchor>
      <arglist>(const Transform3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>operator*</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a2852b2b25b4b6be0cf1790c4cfaa7abe</anchor>
      <arglist>(const Transform3f &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>abe21f11ceb5255d4a3d85315e43a3cd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>ac7ead4b63b3dbcef03104b457007f9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a8b84b3cae7342c4b11f34c670949ce41</anchor>
      <arglist>(const Transform3f &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classhpp_1_1fcl_1_1Transform3f.html</anchorfile>
      <anchor>a3bba6725f3b83a8f0c18177b0f4cc469</anchor>
      <arglist>(const Transform3f &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::TraversalTraitsCollision</name>
    <filename>structhpp_1_1fcl_1_1TraversalTraitsCollision.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::TraversalTraitsDistance</name>
    <filename>structhpp_1_1fcl_1_1TraversalTraitsDistance.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::Triangle</name>
    <filename>classhpp_1_1fcl_1_1Triangle.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>index_type</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>ac70b1320021bb784c3e7239b85c11af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>a59a5a5689556c4722347f690c930e9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>ac9b9bb513d080afe0bad14637d487f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>a59fab69bb881176f0f3357b0844424e7</anchor>
      <arglist>(index_type p1, index_type p2, index_type p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>a143482b5e190d0564771ba58cc4e59ce</anchor>
      <arglist>(index_type p1, index_type p2, index_type p3)</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>operator[]</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>ab2aab5909977cbe33788cec42e7dc6a9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>index_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>accc075fbfe7924e6186d28330b27e684</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>ac64f1670fba9bb6b02ddad7ba2659988</anchor>
      <arglist>(const Triangle &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>size</name>
      <anchorfile>classhpp_1_1fcl_1_1Triangle.html</anchorfile>
      <anchor>a96d660d5bcdfb08c8e42c26fe1bb3452</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::fcl::internal::TriangleAndVertices</name>
    <filename>structhpp_1_1fcl_1_1internal_1_1TriangleAndVertices.html</filename>
    <member kind="variable">
      <type>std::vector&lt; fcl::Vec3f &gt;</type>
      <name>vertices_</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1TriangleAndVertices.html</anchorfile>
      <anchor>a50cc4eb8d0857614ce7d6a9d25b40589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; fcl::Triangle &gt;</type>
      <name>triangles_</name>
      <anchorfile>structhpp_1_1fcl_1_1internal_1_1TriangleAndVertices.html</anchorfile>
      <anchor>a915a8bfcee48edb107f43380a16a93bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::fcl::TriangleP</name>
    <filename>classhpp_1_1fcl_1_1TriangleP.html</filename>
    <base>hpp::fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>TriangleP</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga329cac668c1753a418ae5903a51bc62c</anchor>
      <arglist>(const Vec3f &amp;a_, const Vec3f &amp;b_, const Vec3f &amp;c_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5ae36fc2aa0a64c4a38b1b4ade982473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4e507e91100fc0d0a560967f1f395486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>a</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga43af97d630230adb270449e9ce225b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>b</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gad006b123bc4ac03a11b923503f45df9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>c</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga05b880a55dddd4a0eacfed3f2968bc5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Assimp</name>
    <filename>namespaceAssimp.html</filename>
  </compound>
  <compound kind="namespace">
    <name>details</name>
    <filename>namespacedetails.html</filename>
  </compound>
  <compound kind="namespace">
    <name>hpp</name>
    <filename>namespacehpp.html</filename>
    <namespace>hpp::fcl</namespace>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl</name>
    <filename>namespacehpp_1_1fcl.html</filename>
    <namespace>hpp::fcl::details</namespace>
    <namespace>hpp::fcl::internal</namespace>
    <namespace>hpp::fcl::kIOS_fit_functions</namespace>
    <namespace>hpp::fcl::OBB_fit_functions</namespace>
    <namespace>hpp::fcl::OBBRSS_fit_functions</namespace>
    <namespace>hpp::fcl::RSS_fit_functions</namespace>
    <namespace>hpp::fcl::time</namespace>
    <namespace>hpp::fcl::tools</namespace>
    <class kind="class">hpp::fcl::AABB</class>
    <class kind="class">hpp::fcl::Box</class>
    <class kind="class">hpp::fcl::BVFitter</class>
    <class kind="class">hpp::fcl::BVFitter&lt; AABB &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; kIOS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBB &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; OBBRSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitter&lt; RSS &gt;</class>
    <class kind="class">hpp::fcl::BVFitterTpl</class>
    <class kind="struct">hpp::fcl::BVHFrontNode</class>
    <class kind="class">hpp::fcl::BVHModel</class>
    <class kind="class">hpp::fcl::BVHModelBase</class>
    <class kind="struct">hpp::fcl::BVHShapeCollider</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer&lt; kIOS, T_SH &gt;</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer&lt; OBBRSS, T_SH &gt;</class>
    <class kind="struct">hpp::fcl::BVHShapeDistancer&lt; RSS, T_SH &gt;</class>
    <class kind="struct">hpp::fcl::BVNode</class>
    <class kind="struct">hpp::fcl::BVNodeBase</class>
    <class kind="class">hpp::fcl::BVSplitter</class>
    <class kind="struct">hpp::fcl::BVT</class>
    <class kind="struct">hpp::fcl::BVT_Comparer</class>
    <class kind="struct">hpp::fcl::BVTQ</class>
    <class kind="class">hpp::fcl::CachedMeshLoader</class>
    <class kind="class">hpp::fcl::Capsule</class>
    <class kind="struct">hpp::fcl::CollisionFunctionMatrix</class>
    <class kind="class">hpp::fcl::CollisionGeometry</class>
    <class kind="class">hpp::fcl::CollisionObject</class>
    <class kind="struct">hpp::fcl::CollisionRequest</class>
    <class kind="struct">hpp::fcl::CollisionResult</class>
    <class kind="class">hpp::fcl::ComputeCollision</class>
    <class kind="class">hpp::fcl::ComputeDistance</class>
    <class kind="class">hpp::fcl::Cone</class>
    <class kind="struct">hpp::fcl::Contact</class>
    <class kind="class">hpp::fcl::Convex</class>
    <class kind="class">hpp::fcl::ConvexBase</class>
    <class kind="class">hpp::fcl::Cylinder</class>
    <class kind="struct">hpp::fcl::DistanceFunctionMatrix</class>
    <class kind="struct">hpp::fcl::DistanceRequest</class>
    <class kind="struct">hpp::fcl::DistanceResult</class>
    <class kind="struct">hpp::fcl::GJKSolver</class>
    <class kind="class">hpp::fcl::Halfspace</class>
    <class kind="class">hpp::fcl::KDOP</class>
    <class kind="class">hpp::fcl::kIOS</class>
    <class kind="class">hpp::fcl::MeshLoader</class>
    <class kind="class">hpp::fcl::OBB</class>
    <class kind="class">hpp::fcl::OBBRSS</class>
    <class kind="class">hpp::fcl::OcTree</class>
    <class kind="class">hpp::fcl::Plane</class>
    <class kind="struct">hpp::fcl::QueryRequest</class>
    <class kind="struct">hpp::fcl::QueryResult</class>
    <class kind="class">hpp::fcl::RSS</class>
    <class kind="class">hpp::fcl::ShapeBase</class>
    <class kind="class">hpp::fcl::Sphere</class>
    <class kind="class">hpp::fcl::Transform3f</class>
    <class kind="struct">hpp::fcl::TraversalTraitsCollision</class>
    <class kind="struct">hpp::fcl::TraversalTraitsDistance</class>
    <class kind="class">hpp::fcl::Triangle</class>
    <class kind="class">hpp::fcl::TriangleP</class>
    <member kind="typedef">
      <type>std::list&lt; BVHFrontNode &gt;</type>
      <name>BVHFrontList</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8c20ec44e3a418af3dc5c65703874616</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>FCL_REAL</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adea4a7b8739d4b402df24c8f813f9167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 1 &gt;</type>
      <name>Vec3f</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2c54f23d974b75093503b78c52ebf26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; FCL_REAL, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0290ba47d50e32cb9ec7fe9919b34dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Vector2i</type>
      <name>support_func_guess_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afc53318f22b50924b091c556698d2c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionObject &gt;</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d2a9681dce6546ad22ba34efc9ac53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionObject &gt;</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae73445793afcbbbaf947f1c640402d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>CollisionGeometryPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af3eb23736874699d672c2ba38fabfd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>CollisionGeometryConstPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8a3b79c97987777b6bb50177f5a710c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BVHModelBase &gt;</type>
      <name>BVHModelPtr_t</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad7db690adf28ac471747238f4b6d7898</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; FCL_REAL &gt;</type>
      <name>Quaternion3f</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9e6a031efadd2b45d9e6a710a4db8b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHBuildState</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_EMPTY</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a599291b2358a576bb29ed6bc3f771b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_BEGUN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34acbb3fd1a056ebe10e707a4e9d90ed679</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_PROCESSED</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34ac31973785f46a7236953db39831aa2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATE_BEGUN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34afd113a7a9f4f107f391973f10be2f7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATED</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34af2efe60e4f29aa2f2196ce63d70898d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_REPLACE_BEGUN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a09fe0eaae4eb04eef26fe6f94e20ed34a26bfcd09168f3f2c6e37ec8996dd257b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHReturnCode</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_OK</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a5bb79400f0c1491a91e1714255ac2197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_MODEL_OUT_OF_MEMORY</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a6e8d204d67fd86da296cf5df8df6988f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_OUT_OF_SEQUENCE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a92aab1ee2362a2544e9d2d01fcfb22d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_MODEL</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aba9e47646636d73494e193503de1275b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_PREVIOUS_FRAME</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448aaf8daf2fa25e777017147da4ef285aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNSUPPORTED_FUNCTION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a69fc64d3283b0d6c981fc4d7359537e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNUPDATED_MODEL</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a20ce868149503262e668936ae788fbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_INCORRECT_DATA</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448afa43ae63ca78c626a5b48b2af22d4034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNKNOWN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af75f18596707874e5e9d7c4b01cb6448a101d30d34324deb868539c5397892e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHModelType</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_UNKNOWN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aac715e3d1c0ca1f507696344d223fb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_TRIANGLES</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4ae43bfff9c3dba9c5be72504b905f716e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_POINTCLOUD</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a84f3ad06c89b5abf5d955a04539d9aa4aa8e8c3edd6807b005bd21f6d42e66e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CollisionRequestFlag</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTACT</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a6c6a81beb93df33ef631fb1c5f85b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTANCE_LOWER_BOUND</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a5748b82aa4907305d88b544f1a0d6782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REQUEST</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a72adbac0f5ce2a565ea7f8c8d1e51dd5a51c6f10acf2a00d6364f494c59b19c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OBJECT_TYPE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6393ca4c45659632661d7675b79e6743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743ab97b195154ce66bcde999b96955c34b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a891e2acf8e8a0f7d09161116763e7786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a055e29c6c327db3317981d6e10ea483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a07875801169d528106cdc18050d34b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a8f0daf652a81850f41b7a5f9edd0973a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NODE_TYPE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a83f847c086037f1a595b08cfee003629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a09499bc968015e70c88abd0ac49ec576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a6b8b72b2bc94c4cdaf0f8bdfe2f57d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a97792a9e5b54a66e35d622fc451ae228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ac6537c6f46eb315caa62e958d6a01ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a2bba1b5c0c32a60d102d873a87af3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a7cc7aacb5f760c03eecf10e777ab43a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a82f9a72132fc3ac2129e850eb3f587a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a5b262aadde08387b5024851aefd24f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aa5ada6139dd3dfd92b42ca868e22de5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a968d76f0f0e986116eeb66a8c5625e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629abaafdecaefcd7cc77bb222507c8ed5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a1b92d87b25a7b37c0165dc748e87f0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ad8b2f221e96d4115afcb432f566b91aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ab8222ab78f5e34873e47ff38a4a60990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aaf3f4f6aff7014652bc616023608f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a60419a2711acdcd7f0cec275b690204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a8177e508ab379d8adf9ac8ec6f6b00cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a165fed59837736b3cf419c9371b10ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aeed5451597a2217f56d409fbd501476b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a28eadc00e07b871426473f77fd298654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SplitMethodType</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEAN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a41984460d51b7a959a8dc725e48f3804</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEDIAN</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096a48f7486082fdbb59501f0b5683fed99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_BV_CENTER</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a490b9b85655a80930db24fe8811a7096af22470b4ca15070ae44678e8b39bcbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa55dc0aa22483464ca86d19593cfd425</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac46865af0d6227385e8e9ad84f33f7e1</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae6cf593751a5ec4b8cacff23f263f2c3</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaef074fbede0ec91572f6aaf1c46cf0f1</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;, const CollisionRequest &amp;, FCL_REAL &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7adc32a2ebab911ca43857a7ee7d4a09</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI kIOS</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6dbc1a1b53e4356bbd3762121b7d4b5f</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d66db04e136e5499d38f20dc1f56cf5</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafd7f666001d3e5993a56cc78387c362e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga45fc6ec1ea00a75cd3d683f171b258a7</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI OBB</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0e3572df8542d6e55a90b9ab19af8692</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a82cf29771a725e3f2051c1f4aacc1c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0708248161a09bc67781974a45b126db</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>obbDisjoint</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9e3192731b5c60626d90aac2516965fe</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac655c5e454b1b7ac43a4d536860e8965</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gadb886982090fe15f5d0364f7423a76a6</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41b0545fd5f94baddd4af374018230ab</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0b55e1136e154a2aa39e85cdbbcc271b</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaee05b7707469f40cb749f0e89d827b9a</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFrontList</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0046ac4155cea8a2c752fe897de122fb</anchor>
      <arglist>(BVHFrontList *front_list, int b1, int b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; BV &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a97aabcac4c0f93fc14e1164b4def4082</anchor>
      <arglist>(const BVHModel&lt; BV &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; OBB &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a16b80b10ecf431f0544f27b5c1c52fbc</anchor>
      <arglist>(const BVHModel&lt; OBB &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; AABB &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a186023e22f810b40d74d650ebb97d036</anchor>
      <arglist>(const BVHModel&lt; AABB &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; RSS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0695a89b40fbbd834cb835c30c9ed31e</anchor>
      <arglist>(const BVHModel&lt; RSS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; kIOS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acf82efb8c19c54d20d73186d23c5e9d9</anchor>
      <arglist>(const BVHModel&lt; kIOS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; OBBRSS &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab5ab6b17ce1cc2b66b5a85bb695ce013</anchor>
      <arglist>(const BVHModel&lt; OBBRSS &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 16 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afda4e04adb716bb6082164e76762c03f</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 16 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 18 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6b375121974d6c597c19eb590b36c85e</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 18 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI BVHModel&lt; KDOP&lt; 24 &gt; &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa0f0d3eb878e26066a187ae1575e2f5d</anchor>
      <arglist>(const BVHModel&lt; KDOP&lt; 24 &gt; &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getCovariance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af00bb05ed8ae1410da7e268c26b8ed8b</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adaceec24c8bd00c1f36af97e8e0f9127</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Matrix3f &amp;axes, Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5b66ef2a6abbd25f89ebcd5f1e9d7ff5</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;axes, Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>circumCircleComputation</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6e0aec22c4b80b3a60c442936c6db613</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a14232ec52eedd35670d6665df301f6d1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a92c6bbd26ada192d5a17fd054de5aed2</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad6d6761718327dee06a19e069ada4854</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a444b902dd91955b6feed4931e38500af</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a071b1a99f2481a6f8c9b41a7b24aa9ac</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator~</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a56fef7e1565be433b2d4bda02d9b40f5</anchor>
      <arglist>(CollisionRequestFlag a)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator|</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad3a2e46341378309e16d1cbdc49681e9</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator&amp;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a01b2d93d4e2832cadb6f898d7d3bfc6f</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag</type>
      <name>operator^</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9865727c7e01efebdad7c69e38f0efe6</anchor>
      <arglist>(CollisionRequestFlag a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afdc036f7a9abdd49bbc520055bd197dc</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a45cdaea65b84b32c82928ea0b1f88337</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>CollisionRequestFlag &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a046f64624a803a4738c273a9a075a488</anchor>
      <arglist>(CollisionRequestFlag &amp;a, CollisionRequestFlag b)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI CollisionGeometry *</type>
      <name>extract</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a31b16dfa1a737fdefd7701783a253b53</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a555bf285d1673306077fafed69baa66d</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a96bdf3a7cb8e472cfecfb2b55013ca50</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab855562d17d1b3f1e5b30b8e93eeea01</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1ddc8cd9de4e7f957c1c2cc1ebe6ff61</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6ed2b8b3e3552c6d2c50b1cd18d0eb25</anchor>
      <arglist>(Vec3f *ps, int n, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBB &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a47023cdf59d58acd42c8e61956d1656c</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; RSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abc1822cad419fa4a51eec74a50ec8dd2</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a104b61e67c94287f693cc837284ddd77</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0dcecfe497127679f97a56516d91fefd</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; AABB &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a97f91a601a988c40c0ae2d9b24f34976</anchor>
      <arglist>(Vec3f *ps, int n, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af70bf2c011f5bfc4d826b1ad5aa8d198</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived1 &gt; &amp;_w, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;_u, const Eigen::MatrixBase&lt; Derived3 &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad8854d299d07f45639813469b850e697</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R1, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t1, const Eigen::MatrixBase&lt; Derived &gt; &amp;R2, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t2, const Eigen::MatrixBase&lt; Derived &gt; &amp;R, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a11fdb8bba107aa378d0b4144a9067e5d</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, typename Derived::Scalar dout[3], Vector *vout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqual</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad19b7d3d0aad076d68c9d62e62b599d2</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;lhs, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;rhs, const FCL_REAL tol=std::numeric_limits&lt; FCL_REAL &gt;::epsilon() *100)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>fromAxisAngle</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a19b6516b21d4de7cec704658b232567b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;axis, FCL_REAL angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPolyhedronFromResource</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6f4dd9e9c902262cc1750186ac08a5fe</anchor>
      <arglist>(const std::string &amp;resource_path, const fcl::Vec3f &amp;scale, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;polyhedron)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae7f961891f4397c4601310e1edc26d7c</anchor>
      <arglist>(Sphere, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad5d1ff41aa29efb553cab466c1f0fa9a</anchor>
      <arglist>(Sphere, Sphere)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a637ad857bcde670904ee1ac92962ea5f</anchor>
      <arglist>(Sphere, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a17003890440abab826f73d35d06152e4</anchor>
      <arglist>(Sphere, Halfspace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7904dac07ec3e9a7f327d6abf439a7b6</anchor>
      <arglist>(Sphere, Plane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a25a8b4f58eff55d9f6c440c668171af0</anchor>
      <arglist>(Halfspace, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad1a8902550ffc9e7cf0eec25c1a38ca2</anchor>
      <arglist>(Halfspace, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4474c26a59fe66242f39c96f1ed02780</anchor>
      <arglist>(Halfspace, Cylinder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6761c9fdab9d2644989504233a3b30c5</anchor>
      <arglist>(Halfspace, Cone)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a97e3de1f46129f3c777d841bcdaa3f61</anchor>
      <arglist>(Halfspace, Plane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fc6f6eaf731446d8580111654a2cbd5</anchor>
      <arglist>(Plane, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0ab459f12c7c137b7846a1e306e71201</anchor>
      <arglist>(Plane, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a94b413899776b356bad6b0dbdce25474</anchor>
      <arglist>(Plane, Cylinder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_INTERSECT_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f06284e59efdac747fd01375dee9846</anchor>
      <arglist>(Plane, Cone)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f0dc727a59e23f4b9603cff5928a827</anchor>
      <arglist>(Sphere, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a19f270ca3b3caf1e8cc1eee594e6d653</anchor>
      <arglist>(Sphere, Box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abdb831fa2ce7547d43a8fe52c174fc4f</anchor>
      <arglist>(Sphere, Cylinder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a383e041b2134bdefc315b38cf4ac7d56</anchor>
      <arglist>(Sphere, Sphere)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a253533e0fa668b42a3196a2df90bcd98</anchor>
      <arglist>(Capsule, Capsule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SHAPE_DISTANCE_SPECIALIZATION_BASE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1f547ac63b61a3e609149d09afcd5ca0</anchor>
      <arglist>(TriangleP, TriangleP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4159e5bd7fcd0d21a577e28973f2a3df</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Box &amp;shape, const Transform3f &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2efddca1e728c2facad8bcf136293bee</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int seg, unsigned int ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a082ba3c2464b887cc0c0d07da0a3e69c</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int n_faces_for_unit_sphere)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9ed3aec072ce9b1504575ae48b2bbbb1</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae7eda2b0400534a4888ba1d157f51f6a</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cylinder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a848be7c97311c9ba344e6cb2152c33b0</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab0d67e9fb0ca5af3d416774645673be3</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2be1ed3cb5e10908c58ac49834bcf24c</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7e5dccd855b2e03164a861085d1bcc8c</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac439854fc5c0f54d6d05dd476ca8adf8</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af63a3acef6a1a961a5563bdd4368e421</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac2741e82aa45d5e668a5f6beb9e575ea</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7d057bcd0bc931161aaf2cada8cba84b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a49c5250389b071ff48fd95272c0a6fee</anchor>
      <arglist>(const ConvexBase &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a65b9ffe994ef10c0a8417220cf8128bb</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aff6072402df5dfaf645a0787c61f5ea7</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa756e64cb895761eda9bf6b84c367267</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a62e8682fcab146b16376d0ee164897a8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acc29531b43787c3d787eee2f205d1e5d</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5e589885b7ce8302c967a8ee0bb48b90</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab7a78234dab23157bc13285d5ec1c34e</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae75f48642949abe72cf0a8536af4594b</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8a7d52afadf8b5cb5210177f24b28cbc</anchor>
      <arglist>(const ConvexBase &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac19cf4bd5ddd03c43ad644a53a12766f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7c78518896db821ae4c252e9fa8584a2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a165618e6cd44517690b96b02d519d5ef</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae1dac581028f8a93e212767864f8091c</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af0ed4dad068cbc17368e6e0003da8bf8</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6119093dd05229ed0bbafb783b92416d</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a37581778c3f4d7a8c6aab74a0794fe4a</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a31a5196a276ce91cde2269144d96144b</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa592de4ec63a8446b7e5faa7aaaa4a7a</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f62d309b3eb540b231afd61400f11eb</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac832310f3d393d3fa459a4e89b04accd</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a285046016d23c6a9243ec1648fa1ee03</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a134493346e13d41a50f58c8c3b703805</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab3e987c7055c59c6c909d2eafc086ad5</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f4d9e15c1e1b0473d9ba1b60a0999ce</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad2ece30036a4f85e7c94c83cbc375440</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a389ea0f82667a14b50e3d06f73ddf65c</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a277ffcdbeb26ebc55199e6a406855dd6</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acc71a7af4b6e2e263856268cff862017</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1e0ae109d229233ad501f0ca44c0d83a</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a881ce55ecba092ac28c3e50dc9d251ac</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab8fc7100a8f801232d6edc17318ff4fd</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab73ba0d67fdb919b39b46212afadda5e</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7f7c58989901ce4833565fbad1e941cc</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1d181bb550651b697fe967c65589bd20</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a60c2357a25853e76cee3c90c8fcfdb08</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac11f0f1e774f49eef7ce62cdf76e406b</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0a77f5fb3a5542a8894e703734674548</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a437d93b4db8e66f1eb3efb7240c39eea</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>constructBox</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a223238cae76563da8fb18c186a74b2c3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI Halfspace</type>
      <name>transform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acea5b7360b35ca7d2f645cbe265b846b</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI Plane</type>
      <name>transform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a869df3c83544b794997edf4221483f59</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minmax</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a95a26dfee5c87f320546ec2fa2f262d6</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL &amp;minv, FCL_REAL &amp;maxv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minmax</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a66f4a5e99c0981b8d68f83c638071ca4</anchor>
      <arglist>(FCL_REAL p, FCL_REAL &amp;minv, FCL_REAL &amp;maxv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad4b17f71d100584d52ae63e35b1536f9</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances&lt; 5 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad2547e1a3447902d4ded23fbc95ae40a</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances&lt; 6 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3c6842e7b498de67b98d5c466bd014ee</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDistances&lt; 9 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a83c6d3f70db43e195697ecf0e86239e2</anchor>
      <arglist>(const Vec3f &amp;p, FCL_REAL *d)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7adc32a2ebab911ca43857a7ee7d4a09</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>template KDOP&lt; 16 &gt;</type>
      <name>translate&lt; 16 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f6a14e918ce47e474db2c8b8f4d34a7</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;, const Vec3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template KDOP&lt; 18 &gt;</type>
      <name>translate&lt; 18 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8be9408fc13b2edb8c9c791206d8c671</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;, const Vec3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template KDOP&lt; 24 &gt;</type>
      <name>translate&lt; 24 &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae9f402916155c609a891dcf194655ea5</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;, const Vec3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVertices</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa3a6119df5c6f0637995b0b98de219c6</anchor>
      <arglist>(const OBB &amp;b, Vec3f vertices[8])</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>merge_largedist</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a95047ab2d47a61b3c0ad45da4952219e</anchor>
      <arglist>(const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>merge_smalldist</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>afd1b14d8d731b21fa76dd982e327ff14</anchor>
      <arglist>(const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a438b1c5b6b980188beb2ee3cc62f4d06</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const CollisionRequest &amp;request, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>translate</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a03fc5c77aaee689b2a042aecb92c5a77</anchor>
      <arglist>(const OBBRSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipToRange</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0f34d3f8dc595494ba54237f0f47ab97</anchor>
      <arglist>(FCL_REAL &amp;val, FCL_REAL a, FCL_REAL b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>segCoords</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0ef31b74f4e0cf2aeef87570af22b257</anchor>
      <arglist>(FCL_REAL &amp;t, FCL_REAL &amp;u, FCL_REAL a, FCL_REAL b, FCL_REAL A_dot_B, FCL_REAL A_dot_T, FCL_REAL B_dot_T)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inVoronoi</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a49b58ec6f268b54090f4c9aed30ea79b</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL Anorm_dot_B, FCL_REAL Anorm_dot_T, FCL_REAL A_dot_B, FCL_REAL A_dot_T, FCL_REAL B_dot_T)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>rectDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a82b137b8b8f8501c48c73a88de0ca993</anchor>
      <arglist>(const Matrix3f &amp;Rab, Vec3f const &amp;Tab, const FCL_REAL a[2], const FCL_REAL b[2], Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>translate</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adb206c2b8c711593bb718185089d8680</anchor>
      <arglist>(const RSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac946644080a4d2d93d023cc5bba51b7d</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a47c63f16820c8a25fe6605c35df1e040</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a44c200d8b2af185afb2d265a832987e5</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>adbbd7bb04a2f3718a89a44f3c6231cb0</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0dbc5bff77caead21e8b668f8ce0593a</anchor>
      <arglist>(Vec3f *ps, int n, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitVector</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2b3e7cd992c7ca874384d3adc625f6c0</anchor>
      <arglist>(const BV &amp;bv, Vec3f &amp;split_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitVector&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a239f00a1d16a6ed6c2059d6f682748c2</anchor>
      <arglist>(const kIOS &amp;bv, Vec3f &amp;split_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitVector&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5932f7ee9ca5dbc56cf8bd9cdc24c02b</anchor>
      <arglist>(const OBBRSS &amp;bv, Vec3f &amp;split_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitValue_bvcenter</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa4474ce850d876cf16e476bc611a7dfb</anchor>
      <arglist>(const BV &amp;bv, FCL_REAL &amp;split_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitValue_mean</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7c87b0d7c05b271d5128d3b2fd3f803b</anchor>
      <arglist>(const BV &amp;, Vec3f *vertices, Triangle *triangles, unsigned int *primitive_indices, int num_primitives, BVHModelType type, const Vec3f &amp;split_vector, FCL_REAL &amp;split_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSplitValue_median</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>af6f2988d0be989e59d4d0afcf86c9ce7</anchor>
      <arglist>(const BV &amp;, Vec3f *vertices, Triangle *triangles, unsigned int *primitive_indices, int num_primitives, BVHModelType type, const Vec3f &amp;split_vector, FCL_REAL &amp;split_value)</arglist>
    </member>
    <member kind="function">
      <type>CollisionFunctionMatrix &amp;</type>
      <name>getCollisionFunctionLookTable</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a81b7ad6d7353c8d7f3b3b6ec909e38a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4e6281f0636a0878105861cbae36b0b2</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa721206fac1fe73c87ff92d8a6590db3</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide&lt; OBB &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a379b4a55dd38f24d36cb285f18d49cea</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab6cfcf7370957278bac9500e05cb5312</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a300c230f92bb48cc643c85980637e141</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>BVHCollide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aeb08d4a542ad31f25b8db6ba49d3e49f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8ad4a78816864faefdb0a1f367002b97</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;request, CollisionResult &amp;result, BVHFrontList *front_list, bool recursive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2e075475ca0a78d6346dbf5f28904b5a</anchor>
      <arglist>(DistanceTraversalNodeBase *node, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Box, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3a542fad78c27aaa11b7d026b0e21230</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a59196c519f176f0a8afa55b59519244e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Box, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7271a28bf394bc9aedaf7d654295aa05</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a937503bd452548e66d930bf51e89b284</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Box, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac955d2a1e4d47d32f7b69af70c1ed4b8</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Box &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae0a584775466ce17214b258c1fe6c88b</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>clamp</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a45772505d1441b2599bbcc1bc4237268</anchor>
      <arglist>(const FCL_REAL &amp;num, const FCL_REAL &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clamped_linear</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a87353ea600c2fd543f7b9e6946b21790</anchor>
      <arglist>(Vec3f &amp;a_sd, const Vec3f &amp;a, const FCL_REAL &amp;s_n, const FCL_REAL &amp;s_d, const Vec3f &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Capsule, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa75cca8cfdb400910dd66dcb01fa4795</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Capsule, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6af97e42eac0675fd4bf8db5e3f3e2c9</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a88d0a36136ffc0238d42ab2ac955a7b2</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Capsule, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8b617c95ffe315f3689456823c02581e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Capsule &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa0d71c1fe0a02da7baacb073aa59f4d5</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cone, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fa17a89bb052271d3a7961de48e05f7</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a35ce5f812c38ba262e3446a49eddc350</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cone, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a11eb35e00e4a0f16e9e970320f475b1e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Cone &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a66f8dcb06ab1b26e4b617df86fc8cbcc</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; ConvexBase, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1a2db336d6dac446c5d4f0d0cff3434f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, ConvexBase &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9f91a8a3d12b9a8fc4aef1a679dd58fd</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cylinder, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a54e0b937feae9282d0257974e732eec7</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1241f2928728c06dfde668ebe7170c9b</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cylinder, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a728670ee0709a85bf6a150c8dd9aeb1e</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4e5545917d5c34427e970cc0fd98fc9c</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Cylinder &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0183f3b4eb68c71efb5d7afd05b3e030</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Cylinder, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a22e030433ce7414d647b0c5fd62ae583</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a7bfa9eb4f60cc8918116cb83fae03aff</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab987a476fedd935d8576fae153bdfd46</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Plane &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d253620edf656c6b62ca5d9bf7a1f57</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Plane, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a21180dd7445263984fef09fb5c039320</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Sphere, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abc2af00358733a2c5ab0964bb1b0701f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide&lt; Sphere, Sphere &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4040c03b70c2b7443931f6173ed10385</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; TriangleP, Halfspace &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5e6ef04f3b49ada87928655fd196aaf2</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance&lt; Halfspace, TriangleP &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a38d4f7f428924f0c3fd477cbe0c74d6f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>DistanceFunctionMatrix &amp;</type>
      <name>getDistanceFunctionLookTable</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0d51d69f54dab6a3d9f400d7452beaf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae2bdd78cf33c154a2b34a38f2396d65a</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aef5cf2e59686888177e8ed28c4c0ea24</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance&lt; RSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4aaa1f5947fd74d49b6b75145990adc3</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance&lt; kIOS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9da0e6fc7d523c1323978faa6bd7a443</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance&lt; OBBRSS &gt;</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9458dd4b1b1ed870f44be548535dd5c5</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVHDistance</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae3a02ccd53f059517d6a7c235ea8837a</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a99df9bdbfcae0833e73be287400791fa</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a6dd7021712377c3c830116d8f56dc6be</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>BVHModelPtr_t</type>
      <name>_load</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a9cb45e8a08fe8a6b9c5605ff4f8732cc</anchor>
      <arglist>(const std::string &amp;filename, const Vec3f &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a67bb215a85d574ba182029ca8528fde7</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionNonRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a53c37d0954037e1f11a391bfb71f52cc</anchor>
      <arglist>(CollisionTraversalNodeBase *node, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa845c64b800a6c5b227fc7cd02909e2e</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceQueueRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2f6425035a5938182ff54571d684a79d</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagateBVHFrontListCollisionRecurse</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ab6bf9046f5b5a43e1f5fef451bef310a</anchor>
      <arglist>(CollisionTraversalNodeBase *node, const CollisionRequest &amp;, CollisionResult &amp;result, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ad6307be69028e17b6047d553d002b803</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a68fe3f9431a6833576a9865d2d76aacb</anchor>
      <arglist>(Sphere, Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac4d2a7a83f68983fe0c1c29f0baa66d9</anchor>
      <arglist>(Sphere, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a586248491c5bde5252ca2dc2c6dc2a2d</anchor>
      <arglist>(Sphere, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2183a279c433bb6a10d3afc47ce279fe</anchor>
      <arglist>(Box, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>abd849ef3b5972d6eb00c75f68c0c84c7</anchor>
      <arglist>(Box, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aca6abd1a064c623895fdebf8dd7b8764</anchor>
      <arglist>(Capsule, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a1670598a25cbc06c820d1a0e2e4c2bc1</anchor>
      <arglist>(Capsule, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a2716dd0e3d8c474e237eb68489aba662</anchor>
      <arglist>(Cylinder, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa65127fea08c87b45bd818ebb0ba6034</anchor>
      <arglist>(Cylinder, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ac4beed504fae3a756f74b93be2dd13e8</anchor>
      <arglist>(Cone, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>ae4c0e84b8915349f0d0f8f5c412cd2dd</anchor>
      <arglist>(Cone, Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a0c23d2e645a9e97450f59c983dec3b5f</anchor>
      <arglist>(Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>aa70baddd9ac2ef8975a1017363e69955</anchor>
      <arglist>(Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_INTERSECT_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a80bb32260d0655dfa64770eb8e25d6d8</anchor>
      <arglist>(Plane, Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f61772c196f2cdddb7dfe2848ddbc10</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>add874747393f90e9e222eb1cca1af553</anchor>
      <arglist>(Halfspace,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_TRIANGLE</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5cde650c07da7d11fa2509ad19f7ab67</anchor>
      <arglist>(Plane,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a4f7041c4c34b0f336d9cbdb912ef2120</anchor>
      <arglist>(Sphere, Box,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a21d779a699223126c878c29cc961e3e1</anchor>
      <arglist>(Sphere, Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_PAIR</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a8d315d14201cc056cbfec015472942ea</anchor>
      <arglist>(Sphere, Cylinder,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a5fd66ec0e0d05901161fc577cfeafd99</anchor>
      <arglist>(Sphere,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>a3bc5ba1687331c4d880eb3d6a46cd5fd</anchor>
      <arglist>(Capsule,)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_FCL_DECLARE_SHAPE_DISTANCE_SELF</name>
      <anchorfile>namespacehpp_1_1fcl.html</anchorfile>
      <anchor>acd1a2357f3fc817d4af5a2da28ac1029</anchor>
      <arglist>(TriangleP,)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::details</name>
    <filename>namespacehpp_1_1fcl_1_1details.html</filename>
    <namespace>hpp::fcl::details::details</namespace>
    <class kind="struct">hpp::fcl::details::bvh_shape_traits</class>
    <class kind="struct">hpp::fcl::details::ContactPoint</class>
    <class kind="struct">hpp::fcl::details::EPA</class>
    <class kind="struct">hpp::fcl::details::GJK</class>
    <class kind="struct">hpp::fcl::details::LargeConvex</class>
    <class kind="struct">hpp::fcl::details::MinkowskiDiff</class>
    <class kind="struct">hpp::fcl::details::shape_traits</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Box &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Capsule &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Cone &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; ConvexBase &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Cylinder &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; Sphere &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits&lt; TriangleP &gt;</class>
    <class kind="struct">hpp::fcl::details::shape_traits_base</class>
    <class kind="struct">hpp::fcl::details::SmallConvex</class>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5cb912cfb8f24a5f3345237a09cb61ed</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir, bool dirIsNormalized, int &amp;hint)</arglist>
    </member>
    <member kind="function">
      <type>BVHModel&lt; BV &gt; *</type>
      <name>BVHExtract</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>abb38e75870e230b06fa66ef248c939ab</anchor>
      <arglist>(const BVHModel&lt; BV &gt; &amp;model, const Transform3f &amp;pose, const AABB &amp;_aabb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ae1831c71dd55b3309edb8dc455f7e57a</anchor>
      <arglist>(OBB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ac0240ef5a6daa5185ec811193d8eee00</anchor>
      <arglist>(RSS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7e713b163720df7fdf3c14d0f8aa1d8e</anchor>
      <arglist>(kIOS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVH_SHAPE_DEFAULT_TO_ORIENTED</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a894ea5154f0b3fefb38f521e5f2e74f2</anchor>
      <arglist>(OBBRSS)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>orientedMeshCollide</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a2baf9ffdd8c6a025381203924cab77c4</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>CollisionGeometry *</type>
      <name>extractBVHtpl</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7f008382231fa2745d03415555fb9366</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>CollisionGeometry *</type>
      <name>extractBVH</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a8fed8942037b27bc7f0d6894b70e2522</anchor>
      <arglist>(const CollisionGeometry *model, const Transform3f &amp;pose, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>orientedBVHShapeDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab09b84191f10a783b5fde5d617f2992f</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const GJKSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>orientedMeshDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>af2a9c5a3d381c8923283a0a528d74c07</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a32d1e60c0e54ee1fa192ff01e916c655</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f *contact_points, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCapsuleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aaa3ad7e0e3f64b2e5913d59d046e7ff3</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereCylinderDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a46ae4abaa69cb073fa56a6cc10ad170d</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aad058edfe682c3d503685739c1197b05</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f *contact_points, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4bcaa999947f69643c67c4b026aac9d6</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>segmentSqrDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ae64dcb74833601930e65f5cf340e9d6c</anchor>
      <arglist>(const Vec3f &amp;from, const Vec3f &amp;to, const Vec3f &amp;p, Vec3f &amp;nearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>projectInTriangle</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ada136020ea9fc32c579a6151ca14bc57</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3, const Vec3f &amp;normal, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a77e864eced1982f43af542c16f1ee6a0</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab436f5e0ee56e7272a76991b08ea4dd6</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5f23a98f33621802770322311114ca12</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereTriangleDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a71c3b63fad5224fe749c0674da68df07</anchor>
      <arglist>(const Sphere &amp;sp, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boxBox2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a17dd2491944df7c2b7203c47fd7eaeee</anchor>
      <arglist>(const Vec3f &amp;halfSide1, const Matrix3f &amp;R1, const Vec3f &amp;T1, const Vec3f &amp;halfSide2, const Matrix3f &amp;R2, const Vec3f &amp;T2, Vec3f &amp;normal, FCL_REAL *depth, int *return_code, int maxc, std::vector&lt; ContactPoint &gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareContactPoints</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6b8e614972a9ab4b2411cd5f6a50c6d2</anchor>
      <arglist>(const ContactPoint &amp;c1, const ContactPoint &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxBoxIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a0ae72137615ad019d628eaf9663988ea</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth_, Vec3f *normal_)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>acdbc4ec76f14d4042d0ca323a842d058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>halfspaceIntersectTolerance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a04d86f59357581007b4ab079cf50f7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ae9028aa6f9e5f68f5844f488cbeae004</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aa73c0bc0cce29f5855671b5fe59a9535</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab33117e360755821af52cfe1556e9f27</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsuleHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7aef1441d0e624780c5849a2ec406a39</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>acc72e6011e602fb1701093ae43117763</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coneHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a1e1c570de4b6d603ea687863f1992154</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>af6a06f6817de7c840cd8e02cf82a0468</anchor>
      <arglist>(const ConvexBase &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceTriangleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab07d68942b42396f9d647fd87d943e7a</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeHalfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a281a49255faae461198ecaed5cbe2e41</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a3ecbf7e7887298b43b3c39cd1a17d11e</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f &amp;p, Vec3f &amp;d, Halfspace &amp;s, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspaceDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4877ebf88613a9620944f8d5fa20e59f</anchor>
      <arglist>(const Halfspace &amp;h, const Transform3f &amp;tf1, const ShapeBase &amp;s, const Transform3f &amp;tf2, FCL_REAL &amp;dist, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>planeIntersectTolerance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ac1f5bbb96e2e88210d952146a534ad67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>planeIntersectTolerance&lt; double &gt;</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aaf9f0a709957b7dd69b619a70a6d7a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>planeIntersectTolerance&lt; float &gt;</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>afa2cf3bbce6cf362400ce60faf2e9fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>spherePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a81638ad0d66c1948c768e8fb23a21fdb</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxPlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a04f0fbf51a9254bedc663b9d87ca33d8</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxSphereDistance</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad006a11ba7ff9fad2f6260ebb4256477</anchor>
      <arglist>(const Box &amp;b, const Transform3f &amp;tfb, const Sphere &amp;s, const Transform3f &amp;tfs, FCL_REAL &amp;dist, Vec3f &amp;pb, Vec3f &amp;ps, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>capsulePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a487edd7d0f258f8e8ae2bf51e9e91cdb</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cylinderPlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a94610ecd0149efb25f77098fb679caa0</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a2ad015b80e0f60421c943c5e64d70423</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convexPlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a78b285dfac6b4ea191e8b9229875a332</anchor>
      <arglist>(const ConvexBase &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeTriangleIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a1f2623fa152f2a71df6a7dfeb00510b2</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL &amp;distance, Vec3f &amp;p1, Vec3f &amp;p2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>halfspacePlaneIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a43ef9cfbc30cc714ecf94e2158f09c3b</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Plane &amp;pl, Vec3f &amp;p, Vec3f &amp;d, FCL_REAL &amp;penetration_depth, int &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>planeIntersect</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4b7ed102cb562e7366f5914ae9e30928</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *, FCL_REAL *, Vec3f *)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computePenetration</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6958914c6768e0565649ccd3e6a45804</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computePenetration</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a1e5b67c1c8d8fd6b3f459eda8ed61e29</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, const Transform3f &amp;tf1, const Transform3f &amp;tf2, Vec3f &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a9e745ffcd7639aa2c816f4c649f67b6d</anchor>
      <arglist>(const TriangleP *triangle, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a95bdcec6ddd981eefd54b7a3de3fa534</anchor>
      <arglist>(const Box *box, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>abd27882f4fb672eadf771fa61d8aa8b8</anchor>
      <arglist>(const Sphere *, const Vec3f &amp;, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7491859b78231e3e268616c695578795</anchor>
      <arglist>(const Capsule *capsule, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a26903c3981bfd9e597d83c0cbbe75ef8</anchor>
      <arglist>(const Cone *cone, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a619c48c014d3d4f53d4b1ba46d797df9</anchor>
      <arglist>(const Cylinder *cylinder, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupportLog</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>abec5e56c7649d7570e7c0082bffee33d</anchor>
      <arglist>(const ConvexBase *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupportLinear</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a0d34187556ac5aeffa201f486f09a644</anchor>
      <arglist>(const ConvexBase *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad88fd13a4070a4c563ac6246429675e5</anchor>
      <arglist>(const ConvexBase *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad77fede7aa2e2705f0e079f19c2cf300</anchor>
      <arglist>(const SmallConvex *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getShapeSupport</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>afaa529c5c6e1e520e6ad5e81c22964b2</anchor>
      <arglist>(const LargeConvex *convex, const Vec3f &amp;dir, Vec3f &amp;support, int &amp;hint, MinkowskiDiff::ShapeData *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupportTpl</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6d466e4422f53ce83ab804728f6bb0fe</anchor>
      <arglist>(const Shape0 *s0, const Shape1 *s1, const Matrix3f &amp;oR1, const Vec3f &amp;ot1, const Vec3f &amp;dir, Vec3f &amp;support0, Vec3f &amp;support1, support_func_guess_t &amp;hint, MinkowskiDiff::ShapeData data[2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupportFuncTpl</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a00fee21604630023e0d66b2ebe4b648d</anchor>
      <arglist>(const MinkowskiDiff &amp;md, const Vec3f &amp;dir, bool dirIsNormalized, Vec3f &amp;support0, Vec3f &amp;support1, support_func_guess_t &amp;hint, MinkowskiDiff::ShapeData data[2])</arglist>
    </member>
    <member kind="function">
      <type>MinkowskiDiff::GetSupportFunction</type>
      <name>makeGetSupportFunction1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a7e42073c044fa88122a4c82b7cbede80</anchor>
      <arglist>(const ShapeBase *s1, bool identity, Eigen::Array&lt; FCL_REAL, 1, 2 &gt; &amp;inflation, int linear_log_convex_threshold)</arglist>
    </member>
    <member kind="function">
      <type>MinkowskiDiff::GetSupportFunction</type>
      <name>makeGetSupportFunction0</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad08536916357d367774541a1d7b75fe5</anchor>
      <arglist>(const ShapeBase *s0, const ShapeBase *s1, bool identity, Eigen::Array&lt; FCL_REAL, 1, 2 &gt; &amp;inflation, int linear_log_convex_threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>originToPoint</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ad2e80c57d8891505864124e833e4dab8</anchor>
      <arglist>(const GJK::Simplex &amp;current, GJK::vertex_id_t a, const Vec3f &amp;A, GJK::Simplex &amp;next, Vec3f &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>originToSegment</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a42a2d924a37904deae0a7951675de17a</anchor>
      <arglist>(const GJK::Simplex &amp;current, GJK::vertex_id_t a, GJK::vertex_id_t b, const Vec3f &amp;A, const Vec3f &amp;B, const Vec3f &amp;AB, const FCL_REAL &amp;ABdotAO, GJK::Simplex &amp;next, Vec3f &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>originToTriangle</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a4b0894d02ae510e77642eea0f75653f1</anchor>
      <arglist>(const GJK::Simplex &amp;current, GJK::vertex_id_t a, GJK::vertex_id_t b, GJK::vertex_id_t c, const Vec3f &amp;ABC, const FCL_REAL &amp;ABCdotAO, GJK::Simplex &amp;next, Vec3f &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a5a46cb7c77cd3836445bc15433501fdf</anchor>
      <arglist>(const Box &amp;box, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab00df9e9eada0f53c971e418f3b7f42a</anchor>
      <arglist>(const Sphere &amp;sphere, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ab99bfe98937cf389da7d8956bafac6bb</anchor>
      <arglist>(const Capsule &amp;capsule, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a9d6c1a1814ddc3856e810c607003e8eb</anchor>
      <arglist>(const Cone &amp;cone, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>ac8a1a1009ba7ded27d9b9d45419f966d</anchor>
      <arglist>(const Cylinder &amp;cylinder, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>a6532f22715e97791abde11d7737dea83</anchor>
      <arglist>(const ConvexBase &amp;convex, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt;</type>
      <name>getBoundVertices</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details.html</anchorfile>
      <anchor>aee54dbeda827577a869646eeab845698</anchor>
      <arglist>(const TriangleP &amp;triangle, const Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::details::details</name>
    <filename>namespacehpp_1_1fcl_1_1details_1_1details.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>getClosestPoints</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details_1_1details.html</anchorfile>
      <anchor>aed8175363c4c90df76bdb9767d71dca6</anchor>
      <arglist>(const GJK::Simplex &amp;simplex, Vec3f &amp;w0, Vec3f &amp;w1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inflate</name>
      <anchorfile>namespacehpp_1_1fcl_1_1details_1_1details.html</anchorfile>
      <anchor>a82b0462f84e63e1f5fa14ebe25995867</anchor>
      <arglist>(const MinkowskiDiff &amp;shape, Vec3f &amp;w0, Vec3f &amp;w1)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::internal</name>
    <filename>namespacehpp_1_1fcl_1_1internal.html</filename>
    <class kind="struct">hpp::fcl::internal::Loader</class>
    <class kind="struct">hpp::fcl::internal::obbDisjoint_check_Ai_cross_Bi</class>
    <class kind="struct">hpp::fcl::internal::TriangleAndVertices</class>
    <member kind="function">
      <type>HPP_FCL_DLLAPI void</type>
      <name>buildMesh</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>afd134a194170e4a32978bcfd8aaad2a0</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>meshFromAssimpScene</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>a69a53dd2f3009f45f737b9bc223ee512</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, const boost::shared_ptr&lt; BVHModel&lt; BoundingVolume &gt; &gt; &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>obbDisjoint_check_A_axis</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>adf7a4b9ef24f26b135ce21b66f67e074</anchor>
      <arglist>(const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const Matrix3f &amp;Bf)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>obbDisjoint_check_B_axis</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>a425c17e11e7e74cde1bf071ba59530bc</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, const Matrix3f &amp;Bf)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>recurseBuildMesh</name>
      <anchorfile>namespacehpp_1_1fcl_1_1internal.html</anchorfile>
      <anchor>a0dcee0e08d0fa45492bebca4564bbc56</anchor>
      <arglist>(const fcl::Vec3f &amp;scale, const aiScene *scene, const aiNode *node, unsigned vertices_offset, TriangleAndVertices &amp;tv)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::kIOS_fit_functions</name>
    <filename>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</filename>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>af92076cb492de54bf8b4acce8e296863</anchor>
      <arglist>(Vec3f *ps, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>a1338a8ecf31e7a71c088885488fde262</anchor>
      <arglist>(Vec3f *ps, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>a0dfae2f595ba64c67585dd38bf0afe53</anchor>
      <arglist>(Vec3f *ps, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1kIOS__fit__functions.html</anchorfile>
      <anchor>a736305e9dd83a553a20b92f13fbfd062</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::OBB_fit_functions</name>
    <filename>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</filename>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>a590768616d599b74fda315f795945742</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>aa5143e3e26f5ac2297657a331c5da5d0</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>a91227ba5084b7662b0c0e04122ff66a3</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit6</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>ac4938516465c39fd76cf710cdd19e4c3</anchor>
      <arglist>(Vec3f *ps, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBB__fit__functions.html</anchorfile>
      <anchor>acaa8d4fe1cc86b70354b8805114d6c32</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::OBBRSS_fit_functions</name>
    <filename>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</filename>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>a7fbe7968c0e704d358743d913b007c0c</anchor>
      <arglist>(Vec3f *ps, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>aeb071d2f709665c54ccb2ae0b536d587</anchor>
      <arglist>(Vec3f *ps, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>afe968ff235bac0f0d272e95bfd1c6b84</anchor>
      <arglist>(Vec3f *ps, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1OBBRSS__fit__functions.html</anchorfile>
      <anchor>a4c61fdf874f506f1e96842c8d150b66a</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::RSS_fit_functions</name>
    <filename>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</filename>
    <member kind="function">
      <type>void</type>
      <name>fit1</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a2aa32e14401d6ab1564e853ad14664ab</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit2</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a72b53a97c51c469218f7f69262ce0892</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit3</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a744d1c437b781acf288c30ac92961983</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit6</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>ae66cea431640d57118daacfd89d7ddd6</anchor>
      <arglist>(Vec3f *ps, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitn</name>
      <anchorfile>namespacehpp_1_1fcl_1_1RSS__fit__functions.html</anchorfile>
      <anchor>a7fda0d035ac2101fd02620b7af124fb4</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::time</name>
    <filename>namespacehpp_1_1fcl_1_1time.html</filename>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>point</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>ac4a863e49926d2acd048cf75d4888c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>duration</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>a09f5cee278621a2800b3cd6b7f5c8229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>a8ac8c48fdfd1731eda6a534e174527a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>a1cbdfd430bc6cf66673fb9ebc07a9cad</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>namespacehpp_1_1fcl_1_1time.html</anchorfile>
      <anchor>aafa8547e25fbd027e5ac032328b46465</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::fcl::tools</name>
    <filename>namespacehpp_1_1fcl_1_1tools.html</filename>
    <class kind="class">hpp::fcl::tools::Profiler</class>
  </compound>
  <compound kind="group">
    <name>Bounding_Volume</name>
    <title>Bounding volumes</title>
    <filename>group__Bounding__Volume.html</filename>
    <class kind="class">hpp::fcl::AABB</class>
    <class kind="class">hpp::fcl::KDOP</class>
    <class kind="class">hpp::fcl::kIOS</class>
    <class kind="class">hpp::fcl::OBB</class>
    <class kind="class">hpp::fcl::OBBRSS</class>
    <class kind="class">hpp::fcl::RSS</class>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab9b9351f304ecd9abbaeeec65807f546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0d0974d696d1dc02d0b35429d7701106</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7c168540fedc8f401997b80477f17b76</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga62c00a30c6e0702f713c436a6d793567</anchor>
      <arglist>(const AABB &amp;core, const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad102754f94c9c2c461faedad14da0546</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0e64835bd7589e99a58389da5dae18ba</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga64a55b21bb516a03d8fead9b55b40b56</anchor>
      <arglist>(const AABB &amp;other, AABB &amp;overlap_part) const</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gade72189539494c995941d034bd212b8c</anchor>
      <arglist>(const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaca6805cee7755a8b90feac79df3cc437</anchor>
      <arglist>(const AABB &amp;core, FCL_REAL ratio)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa55dc0aa22483464ca86d19593cfd425</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac46865af0d6227385e8e9ad84f33f7e1</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const AABB &amp;b1, const AABB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga85657a36dee75d211dcbfa3eb9e7a105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga02d789ec14798ee290cb92a8b299ae83</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaeeaf5ff05f20cc5f337dda5434ccded3</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaadb702ec84120a7d825ea288ad18a6c6</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gacaeb1bb87c019077308425d3401fdf99</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga023bf7d35bf241c7c911228740a5d6b3</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7d1ed4e3d3d7445dbb044aa3771bd44e</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga2c57d2f3c330d4f574cdbaf503e32e9d</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga15e5a8827bbe5c40312bba7322e938b2</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0588599e44ec179fb3f74d923718340f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf75d30c0d08cea3b03acecec905e5e03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaeb078d587d08ae72f6971a9c69471bb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa6a164f329fa5c1ad520cb333164ce53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga80c87341269f185ba01f58f36a9d815e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7821f5cfdc009bcb67ffb9be583b5aea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dist</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf234ee14a61453611479d3f25c0a67fa</anchor>
      <arglist>(short i) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>dist</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga60789043c0677a8a541bc4db1d0862e2</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gade27acaeec3f174b0ca8af3fdea175ce</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae6cf593751a5ec4b8cacff23f263f2c3</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaef074fbede0ec91572f6aaf1c46cf0f1</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const KDOP&lt; N &gt; &amp;, const KDOP&lt; N &gt; &amp;, const CollisionRequest &amp;, FCL_REAL &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7adc32a2ebab911ca43857a7ee7d4a09</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa9f463dd27835f8582b623ab50d6b274</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga62b5fae2e9d1020e9c03a96e7af1ba7f</anchor>
      <arglist>(const kIOS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga8fed89a9c67241d95b144908eda6af27</anchor>
      <arglist>(const kIOS &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab086b1a822f7d63cad56dab32f114eed</anchor>
      <arglist>(const kIOS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7d0fc0debf3ff909120f48d98debe17c</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga33142f705508c96867c8ec9728c70ce2</anchor>
      <arglist>(const kIOS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafe4398821a2345585b5609b7066168cc</anchor>
      <arglist>(const kIOS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaab8a38960023c3954b323de036a55486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga34c93ad277fbde55194cae2aa6ce4798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga8c80f53926ed83bfa16540f353649640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga945f64cd49ebb0d4dfc8cf5241faffc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga147787bd1b08e7a38c20f8987539d2d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa85d1e1b8b68341b201e204aee79f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI kIOS</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6dbc1a1b53e4356bbd3762121b7d4b5f</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d66db04e136e5499d38f20dc1f56cf5</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafd7f666001d3e5993a56cc78387c362e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga45fc6ec1ea00a75cd3d683f171b258a7</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad375decb325b9fde83e08e7c79d33bbc</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga83cbcc96e91f6a34e338384486b06f58</anchor>
      <arglist>(const OBB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaebc9f97f3e8ee988ac73b6de383a3b86</anchor>
      <arglist>(const OBB &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga1a2b3e842e709c32518efe7b3fc7c177</anchor>
      <arglist>(const OBB &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga4c28c39c9d1bd5b8d649dda551d903b0</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga559437d3b977205c6f031b24fe23a831</anchor>
      <arglist>(const OBB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae795820ce951ddbbd6267f381cdaf602</anchor>
      <arglist>(const OBB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaee2fdae136346c38fb1c7bb52a99976f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad7af4c911220b9e7ddd0c7d3e687ef7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gacd370ab65d81d252518a73801114026f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga13e1f97642a775ebf32bf8638b5f89c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9c4823ac5df91b5244f55c83186cbc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gabf09b10cb5e9d79ecf665ea4212efe29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI OBB</type>
      <name>translate</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0e3572df8542d6e55a90b9ab19af8692</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a82cf29771a725e3f2051c1f4aacc1c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0708248161a09bc67781974a45b126db</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>obbDisjoint</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedffa1bac660e2cb26eb1cac881166a7</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga66ccf0ba232899a9ae4f2286d8a7a104</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga2cd58c56e944b84506a7fca29d1298d4</anchor>
      <arglist>(const OBBRSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a1ba43a3a928adf351ec7a7d3ef1feb</anchor>
      <arglist>(const OBBRSS &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga22d06adf26c355991aaac824ca5dfb29</anchor>
      <arglist>(const OBBRSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gace676fcc244ae295b46f2194ad342c6f</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab2494414e636eeb3ee91ff452fbbeac3</anchor>
      <arglist>(const OBBRSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7d50a3fd64dc39007b4e30a967de6513</anchor>
      <arglist>(const OBBRSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad3f799d18b378bedcba1533540c1a51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0c6c30eb52d8b9cefd092ddc33700596</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga93fbcbd76e8aee4fb0615c89a1f8df48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad32072cdf1c74b57ea1e65f1251a1bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga30ed937750555ddfd5f0fe22b10c3fbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga97bce2f87ae4ec37d6dc9fe6e1d57835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9e3192731b5c60626d90aac2516965fe</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac655c5e454b1b7ac43a4d536860e8965</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gadb886982090fe15f5d0364f7423a76a6</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaedab894f02ba70312a46f8faff9ad065</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaae5e40853180438e61b7d53c11d66688</anchor>
      <arglist>(const RSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5f62941cc61b0b0f9489f9fea7bf116d</anchor>
      <arglist>(const RSS &amp;other, const CollisionRequest &amp;, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga32e67558e6699023fffab4ff695d9a75</anchor>
      <arglist>(const RSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0cfbdf8c9d6fb2a1432fc7d5038ba8ce</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac934e99ef62e67afdbea8b06f97bda99</anchor>
      <arglist>(const RSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5bb3a7beb0c2d26c5d7515781a8b0c7e</anchor>
      <arglist>(const RSS &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga3bcd007fc19a38439fdd8583aa7c7dcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad1b8b794c0abd20a7b8863288aeb62ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga91998366f8c77dccea9c2f2054c7a7bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf9189a9c2dfd17b5d384ebdbcf23fa1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga349fcbd3d96e1e5d8e6c368f13785e49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga36aed96de33e8a14e7945b129d79ae26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga113e987b7d23870888b9947647a6f530</anchor>
      <arglist>(const RSS &amp;other, RSS &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41b0545fd5f94baddd4af374018230ab</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga0b55e1136e154a2aa39e85cdbbcc271b</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>HPP_FCL_DLLAPI bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaee05b7707469f40cb749f0e89d827b9a</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>min_</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga8c9104bd2301ea2c59dfc655ba0eb42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>max_</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga023ee7b9a78804c86f0a98aee5834b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>o</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gacd0804b928069bdfd681afba4a9bf831</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>r</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9677d5755868f4509b24f9f9e6338f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS_Sphere</type>
      <name>spheres</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga2959f92c45b91119c0a943d8e212f146</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>num_spheres</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac1facc5493466760dc766461acb22bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac393672dd1afa4d7447e9e3768e38013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>axes</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7fa65600df31c0b767aa573f2b1ece26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>To</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf022b399bacc51893532a7946f55300e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>extent</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga9a2cd0b2320a199b97e467f5b9be9dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga32d77538dc0d7ece2ce387a1f86bc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>rss</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gab2b45bed8104f9c5db2ce7e7171e49db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>axes</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gac666fdacdfe7841033ffec0a32bebebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>Tr</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga35617e0c73eebcf3058f9a8816e5c940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>length</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaa9d3d588b267e04ab4fe4f5da29f434f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga84d6a7fb6599d623364e3836a92fb956</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gad94862930432cb74783d0a461927bfa6</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7ae796de9a15fe4083cffcac6d2370cb</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga08308d2e5f168432faaff5e882637ef6</anchor>
      <arglist>(const AABB &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga5d4bc7b9e3c225ba091f1bff7a978b9c</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gae70216d09cca8d159da5b01336edc826</anchor>
      <arglist>(const AABB &amp;other, Vec3f *P, Vec3f *Q) const</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga7c13494e2b7353de97f6d92a2a30d1e6</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga10681d706f476e22c0d7b4bdfddfab96</anchor>
      <arglist>(const AABB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>operator+</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga53962f361a4d357bcaf2b2bd2b6e42f3</anchor>
      <arglist>(const AABB &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gafa1d7557cdf27cb40b42b4cba15ff16a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gaf1a3847f0296afe7fb7af990b66f0c7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga6f0116951112bbd86cad00bac3257bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>gadebef8a965531d53e250e453224c7433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga39c678dd40e46017689146c03a6c3a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>group__Bounding__Volume.html</anchorfile>
      <anchor>ga41514cfdd5b18f203e576811dbff88f0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Construction_Of_BVH</name>
    <title>Construction of BVHModel</title>
    <filename>group__Construction__Of__BVH.html</filename>
    <class kind="struct">hpp::fcl::BVNodeBase</class>
    <class kind="struct">hpp::fcl::BVNode</class>
    <class kind="class">hpp::fcl::BVFitter</class>
    <class kind="class">hpp::fcl::BVSplitter</class>
    <class kind="class">hpp::fcl::BVHModelBase</class>
    <class kind="class">hpp::fcl::BVHModel</class>
    <class kind="class">hpp::fcl::CollisionGeometry</class>
    <class kind="class">hpp::fcl::CollisionObject</class>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743ab97b195154ce66bcde999b96955c34b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a891e2acf8e8a0f7d09161116763e7786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a055e29c6c327db3317981d6e10ea483e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a07875801169d528106cdc18050d34b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6393ca4c45659632661d7675b79e6743a8f0daf652a81850f41b7a5f9edd0973a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a09499bc968015e70c88abd0ac49ec576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a6b8b72b2bc94c4cdaf0f8bdfe2f57d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a97792a9e5b54a66e35d622fc451ae228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ac6537c6f46eb315caa62e958d6a01ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a2bba1b5c0c32a60d102d873a87af3719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a7cc7aacb5f760c03eecf10e777ab43a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a82f9a72132fc3ac2129e850eb3f587a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a5b262aadde08387b5024851aefd24f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aa5ada6139dd3dfd92b42ca868e22de5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a968d76f0f0e986116eeb66a8c5625e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629abaafdecaefcd7cc77bb222507c8ed5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a1b92d87b25a7b37c0165dc748e87f0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ad8b2f221e96d4115afcb432f566b91aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629ab8222ab78f5e34873e47ff38a4a60990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aaf3f4f6aff7014652bc616023608f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a60419a2711acdcd7f0cec275b690204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a8177e508ab379d8adf9ac8ec6f6b00cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a165fed59837736b3cf419c9371b10ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629aeed5451597a2217f56d409fbd501476b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga83f847c086037f1a595b08cfee003629a28eadc00e07b871426473f77fd298654</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gac8d9c480d12fa9c8684364c31cd5f885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>primitiveId</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gad9f4e6cff698513a0c4e256380a6ccae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>leftChild</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga2169cb04b214dd91baa884acc692d215</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rightChild</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga1ee1a9fbd4b3b1f05e5c9cd6d36c923c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gadc38790a18c0cbcb31a9824cd213a5db</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gade315282b9b63c1f7f9ddd3a9f5e6569</anchor>
      <arglist>(const BVNode &amp;other, const CollisionRequest &amp;request, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga378f64a748f9bde68683bb1307a347cf</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaab550aa92f9110a5bf7292023a7c5ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getOrientation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga7e5198a231d3152b1439867151960392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gace98e04016492413de122f457de81270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga9916ac5633d3a6f1ea35766130bfc534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga71058b863f5cdb4a933834e617d0802a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf8afd3a71a067b2a5573274a78026f9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gad5e184908cb836fc1ca631947a4caaf0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga154d7c388170bad969abbc610515b3cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gacc43b1da621d59d6f391ab170f87c1d2</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccupied</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga3ef6dc48afb594aba10e7ceb07824805</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFree</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga7957c87d6a0c5c839fd8925d82e76e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncertain</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga1a796acc1b6396961470aad0530a6501</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga08d46e9dd6181856e92d347847433216</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga8ee3af214b71c2ad6fffdfe38437a1f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gab03f8191f1bed8536bdc308e373f8b28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertiaRelatedToCOM</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaa10d2495d7d66335856b3bff0760bb1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6b435bb536f60c253e1d50d38d1f37f6</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga9e534a28a6f1423b318b048e887f6cae</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gabe1900848c471e4696745cdbbb9c98e8</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CollisionObject</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf013adb130aab42bdb84c2814f109e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gab9b498e019e246f99099e8a556d68121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gac1cacfa4dbc114433afcf97e1c29958e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AABB &amp;</type>
      <name>getAABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gae7262562accd72c3b8e0bf3276a01b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaaa574c2e5842f27a9e6fa994a85b45b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gac7ba9a39a0b211ed2b6361f38868bdbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga36e428721566adb87e7070bfad78d59d</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga34fe359b13b0741f3f6ae837435a510a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaeb183dcc9d1635c47d2b739bac51b5e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>getTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga20020315bc9141e04741aa0ca283a853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaddf13c77f0ccea6ab0cf926433c3ed29</anchor>
      <arglist>(const Matrix3f &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga8328ce08a3803cf6dbcd99bc20c4ce71</anchor>
      <arglist>(const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga8779cd6f3c17e8368413a3cf5b680d79</anchor>
      <arglist>(const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga6af8b793a0a68da0d650918381b911e4</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentityTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga466657d0dce209a9b72f7805712712c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentityTransform</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gabc58df8d6ec5adaf9b0dfcc637edd56b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; const CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf037b948e299c8d1db45604b9e53e3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga9266229d30eacbb09c2134021350d9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_child</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga07267c52a1c2dd1a6d2ab775514acf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_primitive</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga413489df45a14c2b04148db5dfb1669b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_primitives</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga3c3f18494e34d445da2448e924c2c60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga3c20f73aad099049691b52af7d746153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>aabb_center</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gabce28e50b4bdf8b4ae5171f3ba54cbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>aabb_radius</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga5fef2c57c9056c189a6642fd3caa2805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AABB</type>
      <name>aabb_local</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga365b825a84d3455e2dd921d716ba9fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga774ceb428b7ade4a21e9366b6db7c503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga337b0a467ef877ffa91a53953f7665b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_occupied</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga5c4e44d08f6c56ee9d3df994ae936588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_free</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga78ea34df55426f19b7fecf0576e24a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>cgeom</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga24181814d7b46f9121ec1ae3a75f9b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>cgeom_const</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaab38391f887ca8afe702eff7175c075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>t</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gafcd3641c6c9864516c9a7c51d0b6dfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AABB</type>
      <name>aabb</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>gaf322bc0695eeca5db4e7502e76f004ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>group__Construction__Of__BVH.html</anchorfile>
      <anchor>ga91b60d341dc91213222ced8272e317e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Geometric_Shapes</name>
    <title>Geometric shapes</title>
    <filename>group__Geometric__Shapes.html</filename>
    <class kind="class">hpp::fcl::TriangleP</class>
    <class kind="class">hpp::fcl::Box</class>
    <class kind="class">hpp::fcl::Sphere</class>
    <class kind="class">hpp::fcl::Capsule</class>
    <class kind="class">hpp::fcl::Cone</class>
    <class kind="class">hpp::fcl::Cylinder</class>
    <class kind="struct">hpp::fcl::ConvexBase::Neighbors</class>
    <class kind="class">hpp::fcl::ConvexBase</class>
    <class kind="class">hpp::fcl::Convex</class>
    <class kind="class">hpp::fcl::Halfspace</class>
    <class kind="class">hpp::fcl::Plane</class>
    <member kind="function">
      <type></type>
      <name>ShapeBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga0ac2d822a6533c0f079d78eff4a7e597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapeBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5e4546cd74ffa64c06d1c6d9757f50db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gadb718b0de8fea92541e31b5406e04372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangleP</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga329cac668c1753a418ae5903a51bc62c</anchor>
      <arglist>(const Vec3f &amp;a_, const Vec3f &amp;b_, const Vec3f &amp;c_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5ae36fc2aa0a64c4a38b1b4ade982473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4e507e91100fc0d0a560967f1f395486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2cce20c67069f8ea9903f1a4acee9f5d</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga649acee9891aedf1cc76a52447d92b5c</anchor>
      <arglist>(const Vec3f &amp;side_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaadb5563a59b8fcbcd2027ae9810d37e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga06530eb0fade074c2dc56eb367b4f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gab04996138f2b4db7104e8937a65bac5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga156862e04f0dac3c9e22dd3d9062c6a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5fb307840a884b6e9deba1d7b4f13fe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga983f044a63965f415d14ad13d1ca1054</anchor>
      <arglist>(FCL_REAL radius_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaf406037d946c598a77f46b2b1d24f948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaeeaba60fa99bd747b6a4fb8bd0f65ce1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gae59ff5cefd4106ac5ffda6f9fa519383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaa2aad186f810846658eced3690e331ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Capsule</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gad7a6f6f01af5a0aa5cabdd0d1c34da05</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga822f6ab334f174d78b446b0090af0feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2b073f5b94c32c9300c657cf9ed7dfc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga44f7b57b282da9e39bc327dc8bb89457</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaa77def9c91668ca33d84f4ae1152285e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gad365b76a69da25cd767741ca72039c4b</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga94e951be4411c10d45696bf43207a716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gadfd495912714a16419e8b6f0e75a58c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga051e62681b8b95cbe94a5bf6d20c4539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2fba1b904d84fc6368aa2377a6fa2f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga88f3817b1fc0cfb961f98bd3db3a4099</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga729305aad6a4a6b57bc94e644299c8d2</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga34cc22903117ab6451d0517ec5e1bb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gae726105b7911129851a8bb0047e84db6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga19140a65f4eef554905d449adf0cc9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga377a5cf38d065e9cd9ba7ecff53dd991</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexBase *</type>
      <name>convexHull</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gae9275b4ac17e0067b2ba67fafbf95208</anchor>
      <arglist>(const Vec3f *points, int num_points, bool keepTriangles, const char *qhullCommand=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConvexBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gacf65ec48fb78842d0d24866b3de34499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga052f3951626b121cbe95537222950871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga231fb00e3495e85f903054eb8eba3b63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char const  &amp;</type>
      <name>count</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga5fa0da1aabf21fe6d77b6241bbe5cf7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>operator[]</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaec4c1cfc9e0458eece65fbe95b3a5104</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int const  &amp;</type>
      <name>operator[]</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga1e1ec0f66450c045ebac84efc0cd7c40</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvexBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2053d5f0f92e60b65db6f064a41afe30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga6cf3206865f49748971db7db5666c3ac</anchor>
      <arglist>(bool ownStorage, Vec3f *points_, int num_points_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvexBase</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga9fc410e6cac1c0f28b51417e5689f0a9</anchor>
      <arglist>(const ConvexBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga3323c48cb15d98f832c553fd28263946</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga1ac2e3dd24a4d7a681738ea9b565940b</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga22dfa44f758dd9e109ea1449ddc285e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga7b86f46070764b2d1edce92e5edd1639</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga269c25fb5e95b4b67a7023a44dfb1a65</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4aa476a1ef4200a730463c0666374202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga6af381ce357e4ab54f35fc25e533b4a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga2902ef935ab7289ceccbca3f32262c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga071d293316a977dcfdf55e536585dfb2</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8fa292012cf3124a7f28d9643eec9126</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga74e9276bfffa9ccd05fc9285f005ffa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8c2fc6fbaf02f424da8e2d23ab1a2a96</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga853eb7b8aa8eb942a2fe812de6dd23ae</anchor>
      <arglist>(const Vec3f &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga3a65c0da4d0c229e3288cbbeeae9f753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga17355376ea1fde853f20ee73b9f531a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4bcdeee3ba6fd7047081f399ea6dbff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>a</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga43af97d630230adb270449e9ce225b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>b</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gad006b123bc4ac03a11b923503f45df9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>c</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga05b880a55dddd4a0eacfed3f2968bc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>halfSide</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8d398a952424a68f8c2db119fd2d6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga896679c40f9188fdc70e0bab3f2a42d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga580f94067308b5d96e4080b849176155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>halfLength</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga0aadb269798424fcd97d5c3b6e07ffef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga9b7cff69c31230235da6edae78afe0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>halfLength</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga752e49767243d19aa11722f88f141401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaa95961a6c6f693e6f47836ebeaa00f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>halfLength</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga464a89f9a845ec6e767aaf185ecc226a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>points</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga1ad221fdbd753e71608ead4e5b15e081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_points</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga9a7b50dbdaee019ec2838dd3b841cca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>count_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gaffd3a060b6387bcc3bd204206568c9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int *</type>
      <name>n_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga79d0073bafd61942e97be258c7d94718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Neighbors *</type>
      <name>neighbors</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga78b891b76250bf45152ba758c229f707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga8d868d8db88738c0d90211112209084d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int *</type>
      <name>nneighbors_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga3d24e69f6f2014b586f0ed02e5a151fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>own_storage_</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga629a8599bf39ae7419c53b2c982beb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga744d4f1e8dd1a812370eb098d6dbb292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>gafc8222ad029bb97beab8f5b7553daadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga4a7540f85275f6bc834cff51e9b27fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>group__Geometric__Shapes.html</anchorfile>
      <anchor>ga880b3c74f73b5487b7fadbef3dba2730</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index.html">hpp_fcl_documentation</docanchor>
    <docanchor file="index.html" title="Introduction">hpp_fcl_introduction</docanchor>
    <docanchor file="index.html" title="Collision detection and distance lower bound">hpp_fcl_collision_and_distance_lower_bound_computation</docanchor>
  </compound>
</tagfile>
